." Text automatically generated by txt2man
.TH "stop" "7fortran" "December 06, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBSTOP(7f),ALLSTOP(7f) \fP- [FORTRAN:STATEMENT] initiates termination of
\fBexecution
\fB
.SH SYNOPSIS
.nf
.fam C
\fBSTOP\fP [ \fIstop-code\fP ]
\fBERROR\fP \fISTOP\fP [ \fIstop-code\fP ]
.TP
.B \fBstop-code\fP
\fIis\fP  \fIscalar-char-initialization-expr\fP
.RS
.TP
.B \fBor\fP
\fIscalar-int-initialization-expr\fP
.RE
.PP
\fBThe\fP \fIscalar-char-initialization-expr\fP \fIshall\fP \fIbe\fP \fIof\fP \fIdefault\fP kind.
.PP
\fBThe\fP \fIscalar-int-initialization-expr\fP \fIshall\fP \fIbe\fP \fIof\fP \fIdefault\fP kind.
.fam T
.fi
.SH DESCRIPTION
A \fISTOP\fP statement will cause the program to terminate normally. It may
provide additional information in the form \fIof\fP output \fBor\fP a system status
code, depending on the system.
.PP
Any messages generated appear on the ERROR_UNIT file, as identified in
the intrinsic module ISO_FORTRAN_ENV. This unit \fIis\fP often referred to as
"stderr". It \fIis\fP recommended that systems write the value \fIof\fP the stop
code whether numeric \fBor\fP a string.
.PP
Note that although \fISTOP\fP \fIis\fP a "normal" termination system status codes
\fBor\fP "exit codes" are often used for error processing in many scripting
languages. This code may \fIbe\fP detectable by \fBEXECUTE_SYSTEM_COMMAND\fP(3f).
.PP
Execution \fIof\fP an \fBERROR\fP \fISTOP\fP statement initiates error termination \fIof\fP
an execution, which on several systems includes the output from
a traceback.
.PP
So when an image \fIis\fP terminated by a \fISTOP\fP \fBor\fP \fBERROR\fP \fISTOP\fP statement, its
stop code, if any, \fIis\fP made available in a processor-dependent manner.
.PP
If any exception \fIis\fP signaling on a stopped image, the processor issues a
warning indicating which exceptions are signaling;
.PP
When normal termination occurs on more than one image, it \fIis\fP expected
that a processor-dependent summary \fIof\fP any stop codes and signaling
exceptions will \fIbe\fP made available.
.PP
If an integer \fBstop-code\fP \fIis\fP used as the process exit status,
the processor might \fIbe\fP able to interpret only values within a limited
range, \fBor\fP only a limited portion \fIof\fP the integer value (for example,
only the least-significant 8 bits).
.PP
If the \fBstop-code\fP \fIis\fP \fIof\fP type character \fBor\fP does not appear, \fBor\fP if an
END PROGRAM statement \fIis\fP executed, it \fIis\fP recommended that the value
zero \fIbe\fP supplied as the process exit status, if the processor supports
that concept.
.SH EXAMPLE
Sample:
.PP
.nf
.fam C
   program demo_stop
   use, intrinsic :: iso_fortran_env, only : stderr=>ERROR_UNIT
   implicit none
   integer :: stopcode
   ! Normal terminations
      ! A STOP with no parameter is a normal termination and generally
      ! returns a zero status value if the system supports return statuses
      stop
      ! All other stops are error stops
      stop 10
      stop 'That is all, folks!'
      stopcode=11
      stop stopcode
   ! Error terminations
      ! ERROR STOP is always an error stop, even without a stop-code
      error stop
      ! ERROR STOP often displays a traceback but that is not required
      error stop 10
      error stop 'That is all, folks!'
      error stop stopcode
   end program demo_stop

.fam T
.fi
.SS JSU

." Text automatically generated by txt2man
.TH "include" "7fortran" "October 03, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBinclude(7f) \fP- [FORTRAN] including source text
\fB
.SH SYNOPSIS
.nf
.fam C
\fBINCLUDE\fP \fIchar-literal-constant\fP
.fam T
.fi
.SH DESCRIPTION
Additional text may be incorporated into the source text of a program
unit during processing. This is accomplished with the \fBINCLUDE\fP line,
which typically has the form
.PP
.nf
.fam C
     INCLUDE "filename"

.fam T
.fi
An \fBINCLUDE\fP line is not a Fortran statement. It is processed at
compilation. The effect of the \fBINCLUDE\fP line is as if the referenced
source text physically replaced the \fBINCLUDE\fP line prior to program
processing. Included text may contain any source text, including
additional \fBINCLUDE\fP lines; such nested \fBINCLUDE\fP lines are similarly
replaced with the specified source text. The maximum depth of nesting
of any nested \fBINCLUDE\fP lines is processor dependent. Inclusion of the
source text referenced by an \fBINCLUDE\fP line shall not, at any level of
nesting, result in inclusion of the same source text (ie. it cannot
be recursive).
.PP
The interpretation of \fIchar-literal-constant\fP is processor dependent.
.TP
.B It is generally implemented
as a filename containing text to be
included, but could be interpreted as a URL or a system command that
generates text or a database query, or a list of files, for example.
That being said, all current implementations appear to at 
least treat it as a simple filename.
.PP
Where the compiler searches for the filename is
.TP
.B implementation-dependent.
All current implementations appear to at
least search for the file in the same directory as the file containing
the \fBINCLUDE\fP statement if it is not a complete filepath specification. It
is common but not required that other directories are searched as
specified with the common \fB-I\fP switch found on most compiler commands.
.PP
The \fIchar-literal-constant\fP shall not have a kind type parameter value
that is a named-constant. That is, it must be a quoted string. It cannot
be something like
.PP
.nf
.fam C
      character(len=*),parameter :: filename='willnotwork.inc'
      include filename

.fam T
.fi
An \fBINCLUDE\fP line shall appear on a single source line where a statement
may appear (many compilers support an extension allowing continuation
lines to be supported); it must be the only nonblank text on the line
other than an optional trailing comment (no statment label is allowed).
So here are some bad ideas
.PP
.nf
.fam C
      INCLUDE "filename";I=10 ! NO: multiple statements on line
      100 INCLUDE 'filename'  ! NO: statement label not allowed
      ! continuation often works but is non-standard
      INCLUDE &
      & 'filename'   
      INCLUDE 'file&
      &name'

.fam T
.fi
When an \fBINCLUDE\fP line is resolved, the first included statement line
cannot be a continuation line and the last included statement line
cannot be continued.
.SS  PREPROCESSING

Note that an \fBINCLUDE\fP line is generally processed after any preprocessor
so the \fBINCLUDE\fP file should not include preprocessor directives such as
\fBcpp\fP(1) or \fBfpp\fP(1) directives. If that is required you probably need to
use an equivalent preprocessor directive such as a \fBcpp\fP(1) "#include"
directive instead of a Fortran \fBINCLUDE\fP.
.SS  SUMMARY

So it is a de-facto standard that an \fBINCLUDE\fP at least supports a simple
filename pointing to a file in the directory where the file containing
the \fBINCLUDE\fP file resides or a full path name in single or double quotes.
.PP
An \fBINCLUDE\fP statement was a common way to ensure a COMMONBLOCK was
declared the same in multiple files (at least if every file with the
\fBINCLUDE\fP was recompiled). It should generally be avoided and a MODULE
should be used instead of a COMMONBLOCK in the vast majority of cases
in new code.
.SS  RULES FOR FIXED AND FREE FILE FORMAT PORTABILITY

If the code in your "include file" needs read by both old fixed-format
files and free-format files it is not necessary to maintain two copies
of the file.
.PP
Observing the following rules allows included code to be used with
either free or fixed source forms.
.RS
.IP \(bu 3
Confine statement labels to character positions 1 to
5 and statements to character positions 7 to 72
.IP \(bu 3
Treat blanks as being significant.
.IP \(bu 3
Use only the exclamation mark (!) to indicate
a comment, but do not start the comment in character
position 6.
.IP \(bu 3
For continued statements, place an ampersand (&) in
both character position 73 of a continued line and character
position 6 of a continuation line.
.SH EXAMPLE
Sample program:
.PP
.nf
.fam C
     program show_include
     implicit none
     include "declarations.inc"
        write(*,*)'Hello World!'
        include "somecode.inc"
     includes
        include "somemorecode.inc"
     end program show_include

." Text automatically generated by txt2man
.TH "system_clock" "3fortran" "October 07, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBsystem_clock(3f) \fP- [FORTRAN:INTRINSIC:SYSTEM ENVIRONMENT] Return
\fBnumeric data from a real-time clock.
\fB
.SH SYNTAX
subroutine \fBsystem_clock\fP([count, count_rate, count_max])
.PP
.nf
.fam C
   integer,intent(out),optional  :: count
   integer,intent(out),optional  :: count_rate
      or
   real,intent(out),optional     :: count_rate
   integer,intent(out,optional   :: count_max

.fam T
.fi
.SH DESCRIPTION
system_clock lets you measure durations of time with the precision
of the smallest time increment generally available on a system by
returning processor-dependent values based on the current value of the
processor clock. The CLOCK value is incremented by one for each clock
count until the value count_max is reached and is then reset to zero
at the next count. CLOCK therefore is a modulo value that lies in the
range 0 to count_max. count_rate and count_max are assumed constant
(even though CPU rates can vary on a single platform).
.PP
count_rate is system dependent and can vary depending on the kind of
the arguments.
.PP
If there is no clock, or querying the clock fails, COUNT is set to
\fB-huge\fP(count), and count_rate and count_max are set to zero.
.PP
system_clock is typically used to measure short time intervals (system
clocks may be 24-hour clocks or measure processor clock ticks since
boot, for example). It is most often used for measuring or tracking
the time spent in code blocks in lieu of using profiling tools.
.SH ARGUMENTS
.TP
.B COUNT
(optional) shall be an integer scalar.
It is assigned a processor-dependent value based on the
current value of the processor clock, or \fB-HUGE\fP (COUNT)
if there is no clock. The processor-dependent value is
incremented by one for each clock count until the value
COUNT_MAX is reached and is reset to zero at the next
count. It lies in the range 0 to COUNT_MAX if there is
a clock.
.TP
.B COUNT_RATE
(optional) shall be an integer or real scalar.
It is assigned a processor-dependent approximation
to the number of processor clock counts per second,
or zero if there is no clock.
.TP
.B COUNT_MAX
(optional) shall be an integer scalar. It is assigned the
maximum value that COUNT can have, or zero if there is
no clock.
.SH EXAMPLE
Sample program:
.PP
.nf
.fam C
      program demo_system_clock
      implicit none
        integer :: count, count_rate, count_max
        call system_clock(count, count_rate, count_max)
        write(*,*) count, count_rate, count_max
      end program demo_system_clock

.fam T
.fi
If the processor clock is a 24-hour clock that registers time at
approximately 18.20648193 ticks per second, at 11:30 A.M. the reference
.PP
.nf
.fam C
      CALL SYSTEM_CLOCK (COUNT = C, COUNT_RATE = R, COUNT_MAX = M)

.fam T
.fi
defines
.PP
.nf
.fam C
      C = (11*3600+30*60)*18.20648193 = 753748,
      R = 18.20648193, and
      M = 24*3600*18.20648193-1 = 1573039.

.fam T
.fi
.SH STANDARD
[[Fortran 95]] and later
.SH CLASS
Subroutine
.SH SEE ALSO
\fBdate_and_time\fP(3), \fBcpu_time\fP(3)

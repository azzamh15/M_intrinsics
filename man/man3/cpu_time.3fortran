." Text automatically generated by txt2man
.TH "cpu_time" "3fortran" "July 01, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBcpu_time(3f) \fP- [FORTRAN:INTRINSIC:SYSTEM ENVIRONMENT] return CPU processor time in seconds
\fB
.SH SYNTAX

call \fBcpu_time\fP(time)
.PP
.nf
.fam C
      real,intent(out) :: time

.fam T
.fi
.SH DESCRIPTION

Returns a REAL value representing the elapsed CPU time in
seconds. This is useful for testing segments of code to determine
execution time.
.PP
The exact definition of time is left imprecise because of the
variability in what different processors are able to provide.
.PP
for \fBgfortran\fP(1) If a time source is available, time will be reported
with microsecond resolution. If no time source is available, TIME is
set to \fB-1.0\fP.
.PP
Note that TIME may contain a system dependent, arbitrary offset
and may not start with 0.0. For cpu_time the absolute
value is meaningless. Only differences between subsequent calls,
as shown in the example below, should be used.
.PP
A processor for which a single result is inadequate (for example,
a parallel processor) might choose to provide an additional version
for which time is an array.
.SH RETURN VALUE

.TP
.B TIME
The type shall be REAL with \fBintent\fP(out).
It is assigned a processor-dependent approximation to the
processor time in seconds. If the processor cannot return
a meaningful time, a processor-dependent negative value is returned.
The start time is left imprecise because the purpose is to
time sections of code, as in the example.
This might or might not include system overhead time.
.SH EXAMPLE

Sample program:
.PP
.nf
.fam C
    program demo_cpu_time
       real :: start, finish
       call cpu_time(start)
       ! put code to test here
       call cpu_time(finish)
       ! writes processor time taken by the piece of code.
       print '("Processor Time = ",f6.3," seconds.")',finish-start
    end program demo_cpu_time

.fam T
.fi
.SH STANDARD

[[Fortran 95]] and later
.SH CLASS

Subroutine
.SH SEE ALSO

[[system_clock]], [[date_and_time]]

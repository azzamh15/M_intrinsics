." Text automatically generated by txt2man
.TH "atomic_ref" "3fortran" "November 20, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBatomic_ref\fP(3f) - [FORTRAN:INTRINSIC:ATOMIC] Obtaining the value of a
variable atomically

.SH SYNTAX
call \fBatomic_ref\fP(value, atom [, stat])
.SH DESCRIPTION

\fBatomic_ref\fP(VALUE, ATOM ) atomically assigns the value of the variable
ATOM to VALUE. When STAT is present and the invocation was
successful, it is assigned the value 0. If it is present and the
invocation has failed, it is assigned a positive value; in particular,
for a coindexed ATOM, if the remote image has stopped, it is
assigned the value of iso_fortran_env's STAT_STOPPED_IMAGE and if
the remote image has failed, the value STAT_FAILED_IMAGE.
.SH ARGUMENTS
.TP
.B VALUE
Scalar of the same type as ATOM. If the kind
is different, the value is converted to the kind of ATOM.
.TP
.B ATOM
Scalar coarray or coindexed variable of either integer type
with atomic_int_kind kind or logical type with
atomic_logical_kind kind.
.TP
.B STAT
(optional) Scalar default-kind integer variable.
.SH EXAMPLE
Sample program:
.PP
.nf
.fam C
   program demo_atomic_ref
   use iso_fortran_env
   implicit none
   logical(atomic_logical_kind) :: atom[*]
   logical :: val
      call atomic_ref( val, atom[1] )
      ! \.\.\.
      call atomic_ref( val, atom[1] )
      if (val) then
         print *, "Obtained"
      endif
   end program demo_atomic_ref

.fam T
.fi
.SH STANDARD
[[Fortran 2008]] and later; with STAT, [[TS 18508]] or later
.SH CLASS
Atomic subroutine
.SH SEE ALSO
\fBatomic_define\fP(3), \fBatomic_cas\fP(3), \fBiso_fortran_env\fP(3),
\fBatomic_fetch_add\fP(3), \fBatomic_fetch_and\fP(3), \fBatomic_fetch_or\fP(3),
\fBatomic_fetch_xor\fP(3)

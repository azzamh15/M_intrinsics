." Text automatically generated by txt2man
.TH "get_command_argument" "3fortran" "December 22, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBget_command_argument(3f) \fP- [FORTRAN:INTRINSIC:SYSTEM ENVIRONMENT] Get
\fBcommand line arguments
\fB
.SH SYNTAX
call \fBget_command_argument\fP(number [, value, length, status])
.PP
.nf
.fam C
     integer,intent(in)                    :: number
     character(len=*),intent(out),optional :: value
     integer,intent(out),optional          :: length
     integer,intent(out),optional          :: status

.fam T
.fi
.SH DESCRIPTION
Retrieve the NUMBER-th argument that was passed on the command line
when the containing program was invoked.
.PP
There is not anything specifically stated about what an argument is but
in practice the arguments are split on whitespace unless the arguments
are quoted and IFS values (Internal Field Separators) used by common
shells are ignored.
.SH OPTIONS
.TP
.B NUMBER
Shall be a scalar of type \fBinteger\fP(4), NUMBER >= 0.
If NUMBER = 0, VALUE is set to the name of the program
(on systems that support this feature).
.SH RETURNS
.TP
.B VALUE
Shall be a scalar of type CHARACTER and of default kind.
After get_command_argument returns, the VALUE argument
holds the NUMBER-th command line argument. If VALUE can
not hold the argument, it is truncated to fit the length
of VALUE. If there are less than NUMBER arguments specified
at the command line, VALUE will be filled with blanks.
.TP
.B LENGTH
(Optional) Shall be a scalar of type \fBinteger\fP(4).
The LENGTH argument contains the length of the
NUMBER-th command line argument.
.TP
.B STATUS
(Optional) Shall be a scalar of type \fBinteger\fP(4).
If the argument retrieval fails, STATUS is a positive number;
if VALUE contains a truncated command line argument, STATUS
is \fB-1\fP; and otherwise the STATUS is zero.
.SH EXAMPLE
Sample program:
.PP
.nf
.fam C
   program demo_get_command_argument
   implicit none
   character(len=255)           :: progname
   integer                      :: stat
   integer                      :: count,i, longest, argument_length
   integer,allocatable          :: istat(:), ilen(:)
   character(len=:),allocatable :: arguments(:)
     ! get number of arguments
     count = command_argument_count()
     write(*,*)'The number of arguments is ',count
     ! simple usage
     call get_command_argument (0, progname, status=stat)
     if (stat == 0) then
        print *, "The program's name is " // trim (progname)
     endif
     ! showing how to make an array to hold any argument list
     ! find longest argument
     longest=0
     do i=0,count
        call get_command_argument(number=i,length=argument_length)
        longest=max(longest,argument_length)
     enddo
     ! allocate string array big enough to hold command line argument strings
     ! and related information
     allocate(character(len=longest) :: arguments(0:count))
     allocate(istat(0:count))
     allocate(ilen(0:count))
     ! read the arguments into the array
     do i=0,count
       call get_command_argument(i, arguments(i),status=istat(i),length=ilen(i))
     enddo
     ! show the results
     write (*,'(i3.3,1x,i0.5,1x,i0.5,1x,"[",a,"]")') &
     & (i,istat(i),ilen(i),arguments(i)(:ilen(i)),i=0,count)
   end program demo_get_command_argument

.fam T
.fi
Sample output:
.PP
.nf
.fam C
   ./test_get_command_argument a    test  'of getting   arguments  ' "  leading"

   > The number of arguments is            5
   > The program's name is xxx
   >000 00000 00003 [./test_get_command_argument]
   >001 00000 00001 [a]
   >003 00000 00004 [test]
   >004 00000 00024 [of getting   arguments  ]
   >005 00000 00018 [  leading]

.fam T
.fi
.SH STANDARD
[[Fortran 2003]] and later
.SH CLASS
Subroutine
.SH SEE ALSO
\fBget_command\fP(3), \fBcommand_argument_count\fP(3)
.SS JSU

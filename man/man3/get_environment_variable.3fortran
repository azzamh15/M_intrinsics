." Text automatically generated by txt2man
.TH "get_environment_variable" "3fortran" "June 30, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fB
\fBget_environment_variable(3f) \fP- [FORTRAN:INTRINSIC:SYSTEM ENVIRONMENT] Get an environmental variable
\fB
.SH SYNTAX

call \fBget_environment_variable\fP(NAME[, VALUE, LENGTH, STATUS, TRIM_NAME)
.SH DESCRIPTION

Get the VALUE of the environmental variable NAME.
.PP
Note that get_environment_variable need not be thread-safe. It is
the responsibility of the user to ensure that the environment is not
being updated concurrently.
.SH ARGUMENTS

.TP
.B NAME
(Optional) Shall be a scalar of type CHARACTER and of default kind.
.TP
.B VALUE
(Optional) Shall be a scalar of type CHARACTER and of default kind.
.TP
.B LENGTH
(Optional) Shall be a scalar of type INTEGER and of default kind.
.TP
.B STATUS
(Optional) Shall be a scalar of type INTEGER and of default kind.
.TP
.B TRIM_NAME
(Optional) Shall be a scalar of type LOGICAL and of default kind.
.SH RETURN VALUE

Stores the value of NAME in VALUE.
If VALUE is not large enough to hold the data, it is truncated.
If NAME is not set, VALUE will be filled with blanks.
.PP
Argument LENGTH contains the length needed for storing the environment
variable NAME or zero if it is not present.
.PP
STATUS is
\fB-1\fP if VALUE is present but too short for the environment variable;
it is 1 if the environment variable does not exist
and 2 if the processor does not support environment variables;
in all other cases STATUS is zero.
.PP
If TRIM_NAME is present with the value .FALSE.,
the trailing blanks in NAME are significant;
otherwise they are not part of the environment variable name.
.SH EXAMPLE

Sample program:
.PP
.nf
.fam C
   program demo_getenv
     implicit none
     character(len=:),allocatable :: var
     character(len=:),allocatable :: homedir
     integer :: howbig, stat
     var='HOME'
     ! get length required to hold value
     call get_environment_variable(var, length=howbig,status=stat)
     select case (stat)
     case (1)
        print *, "HOME is not defined in the environment.  Strange\.\.\."
     case (2)
        print *, "This processor doesn't support environment variables.  Boooh!"
     case default
        ! make string to hold value of sufficient size
        allocate(character(len=howbig) :: homedir)
        ! get value
        call get_environment_variable(var, homedir)
        ! print environment variable name value
        write (*,'(a,"=""",a,"""")')var,trim(homedir)
     end select
   end program demo_getenv

.fam T
.fi
.RE
Typical Results:
.PP
.nf
.fam C
   HOME="/home/urbanjs"

.fam T
.fi
.SH STANDARD

[[Fortran 2003]] and later
.SH CLASS

Subroutine

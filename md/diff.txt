diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ABS.md _pages/ABS.md
< Otherwise the returned type will be the same type as **a__.
< **abs(a)** computes the absolute value of numeric argument **a__.
<     : the type of the argument shall be an _integer_, _real_, or _complex_
>   : the type of the argument shall be an _integer_, _real_, or _complex_
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ACHAR.md _pages/ACHAR.md
<     : the _integer_ value to convert to an ASCII character, in the range
<     : (optional) an _integer_ initialization expression indicating the kind
>   : the _integer_ value to convert to an ASCII character, in the range
>   : (optional) an _integer_ initialization expression indicating the kind
< [__char**(3)](CHAR),
< [__iachar**(3)](IACHAR),
< [__ichar**(3)](ICHAR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ACOSH.md _pages/ACOSH.md
< The return value has the same type and kind as **x__.
< Inverse function: [__cosh**(3)](COSH)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ACOS.md _pages/ACOS.md
< **acos(x)** computes the arccosine of **x** (inverse of **cos(x)__).
<     : Must be type _real_ or _complex_. If the type is _real_, the value
<     must satisfy |__x__| <= 1.
>   : Must be type _real_ or _complex_. If the type is _real_, the value
< The return value is of the same type and kind as **x__. The _real_ part of
> The return value is of the same type and kind as **x**. The _real_ part of
<  - [wikipedia: inverse trigonometric functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)
> - [wikipedia: inverse trigonometric functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)
< Inverse function: [__cos**(3](COS))
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ADJUSTL.md _pages/ADJUSTL.md
< inserted on the end of **string__.
< [__adjustr**(3)](ADJUSTR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ADJUSTR.md _pages/ADJUSTR.md
< inserted at the start of **string__.
< [__adjustl**(3)](ADJUSTL)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/AIMAG.md _pages/AIMAG.md
< **aimag(z)** yields the imaginary part of complex argument **z__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/AINT.md _pages/AINT.md
< type parameter will be given by **kind__. If the magnitude of **x**
< does not exceed its magnitude. The sign is the same as the sign of **x__.
< [__anint**(3)](ANINT),
< [__int**(3)](INT),
< [__nint**(3)](NINT),
< [__selected_int_kind**(3)](SELECTED_INT_KIND),
< [__ceiling**(3)](CEILING),
< [__floor**(3)](FLOOR)
> [**selected_int_kind**(3)](SELECTED_INT_KIND),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ALL.md _pages/ALL.md
< Logical conjunction of elements of **mask** along dimension **dim__.
< "__all(mask, dim)__" determines if all the values are true in **mask**
< in the array along dimension **dim__.
<     _logical_ and it shall not be scalar.
<     between one and the rank of **mask__. The corresponding actual argument
>   _logical_ and it shall not be scalar.
< "__all(mask)__" returns a scalar value of type _logical_ where the kind
< type parameter is the same as the kind type parameter of **mask__. If
> "**all(mask)**" returns a scalar value of type _logical_ where the kind
<      to **all(mask)__. If the rank is greater than one, then **all(mask,
<  3.  Result Characteristics. The result is of type _logical_ with the
<      same kind type parameter as **mask__. It is scalar if **dim**
<      is absent or **n = 1__; otherwise, the result has rank **n - 1**
<      where **\[d1 , d2 , . . . , dn \]** is the shape of **mask__.
<                **all(mask)__. Otherwise, the value of element **(s1 , s2 ,
<                :, sdim+1 , . . . , sn ))__.
> 3.  Result Characteristics. The result is of type _logical_ with the
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ALLOCATED.md _pages/ALLOCATED.md
< [__move\_alloc**(3)](MOVE_ALLOC)
> [**move_alloc**(3)](MOVE_ALLOC)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ANINT.md _pages/ANINT.md
< parameter will be given by **kind__. If **a** is greater than zero, **anint(a)**
< returns **aint(a + 0.5)__. If **a** is less than or equal to zero then it
< returns **aint(a - 0.5)__.
< [__aint**(3)](AINT),
< [__int**(3)](INT),
< [__nint**(3)](NINT),
< [__selected_int_kind**(3)](SELECTED_INT_KIND),
< [__ceiling**(3)](CEILING),
< [__floor**(3)](FLOOR)
> [**selected_int_kind**(3)](SELECTED_INT_KIND),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ANY.md _pages/ANY.md
< array **mask** along dimension **dim** are **.true.__.
< parameter is the same as the kind type parameter of **mask__. If **dim** is
<     is **.false.__. It also is false if **mask** has zero size.
<     **any(mask)__. If the rank is greater than one, then **any(mask,
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: ARRAY_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ASINH.md _pages/ASINH.md
< **asinh(x)** computes the inverse hyperbolic sine of **x__.
< The return value is of the same type and kind as **x__. If **x** is _complex_, the
< **-PI/2 \<= aimag(asinh(x)) \<= PI/2__.
> The return value is of the same type and kind as **x**. If **x** is _complex_, the
< Inverse function: [__sinh**(3)](SINH)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ASIN.md _pages/ASIN.md
< **asin(x)** computes the arcsine of its argument **x__.
<     : The type shall be either _real_ and a magnitude that is less than or
<     equal to one; or be _complex_.
>   : The type shall be either _real_ and a magnitude that is less than or
>   equal to one; or be _complex_.
<     : The return value is of the same type and kind as **x__. The real part of
<     asin(x) \<= PI/2__.
<  - [wikipedia: inverse trigonometric functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)
> - [wikipedia: inverse trigonometric functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)
< Inverse function: [__sin**(3)](SIN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ASSOCIATED.md _pages/ASSOCIATED.md
< pointer **pointer** or if **pointer** is associated with the target **target__.
<     : **pointer** shall have the _pointer_ attribute and it can be of any type.
>   : **pointer** shall have the _pointer_ attribute and it can be of any type.
<     same type, kind type parameter, and array rank as **pointer__.
< [__null**(3)](NULL)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATAN2.md _pages/ATAN2.md
< &= \tan**{__-1__}(y / x) \end{aligned} $$
<     : The type and kind type parameter shall be the same as **y__. If **y** is
< The return value has the same type and kind type parameter as **y__. It is
< the principal value of the complex number **(x + i, y)__. If x is nonzero,
< then it lies in the range **-PI \<= atan(x) \<= PI__. The sign is
< magnitude of the result is **PI/2__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATANH.md _pages/ATANH.md
< **atanh(x)** computes the inverse hyperbolic tangent of **x__.
< The return value has same type and kind as **x__. If **x** is _complex_, the
> The return value has same type and kind as **x**. If **x** is _complex_, the
< Inverse function: [__tanh**(3)](TANH)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATAN.md _pages/ATAN.md
>   - result = __atan(y, x)__
< by the associated type. If **y** is present **x** is _real`.
> by the associated type. If **y** is present **x** is \_real`.
< **atan(x)** computes the arctangent of **x__.
<     : The type shall be _real_ or _complex_; if **y** is present, **x**
<       shall be _real_.
<     : Shall be of the same type and kind as **x__. If **x** is zero, **y** 
>   : The type shall be _real_ or _complex_; if **y** is present, **x**
>   shall be _real_.
< The returned value is of the same type and kind as **x__. If **y** is
< present, the result is identical to **atan2(y,x)__. Otherwise, it is the
<  - [wikipedia: inverse trigonometric functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)
> - [wikipedia: inverse trigonometric functions](https://en.wikipedia.org/wiki/Inverse_trigonometric_functions)
< [__atan2**(3)](ATAN2), [__tan**(3)](TAN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_ADD.md _pages/ATOMIC_ADD.md
> ## atomic_add
< **atomic\_add**(3) - \[ATOMIC\] Atomic ADD operation 
> **atomic_add**(3) - \[ATOMIC\] Atomic ADD operation
< **atomic\_ad(atom, value)** atomically adds the value of VAR to the
< variable **atom__. When **stat** is present and the invocation was successful,
> **atomic_ad(atom, value)** atomically adds the value of VAR to the
< iso\_fortran\_env's stat\_stopped\_image and if the remote image has
< failed, the value stat\_failed\_image.
> iso_fortran_env's stat_stopped_image and if the remote image has
> failed, the value stat_failed_image.
<     atomic\_int\_kind kind.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind.
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_fetch\_add**(3)](ATOMIC_FETCH),
< [__atomic\_and**(3)](ATOMIC_AND),
< [__atomic\_or**(3)](ATOMIC_OR),
< [__atomic\_xor**(3)](ATOMIC_XOR)
< **iso\_fortran\_env**(3),
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_fetch_add**(3)](ATOMIC_FETCH),
> [**atomic_and**(3)](ATOMIC_AND),
> [**atomic_or**(3)](ATOMIC_OR),
> [**atomic_xor**(3)](ATOMIC_XOR)
> **iso_fortran_env**(3),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_AND.md _pages/ATOMIC_AND.md
> ## atomic_and
< **atomic\_and**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise AND operation
> **atomic_and**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise AND operation
< **atomic\_and(atom, value)** atomically defines **atom** with the bitwise
< **and** between the values of **atom** and **value__. When **stat** is present and the
> **atomic_and(atom, value)** atomically defines **atom** with the bitwise
< assigned the value of iso\_fortran\_env's stat\_stopped\_image and if
< the remote image has failed, the value stat\_failed\_image.
> assigned the value of iso_fortran_env's stat_stopped_image and if
> the remote image has failed, the value stat_failed_image.
<     atomic\_int\_kind kind.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind.
< [__atomic\_fetch\_and**(3)](ATOMIC_FETCH_AND),
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_ref**(3)](ATOMIC_REF),
< [__atomic\_cas**(3)](ATOMIC_CAS),
< **iso\_fortran\_env**(3),
< [__atomic\_add**(3)](ATOMIC_ADD),
< [__atomic\_or**(3)](ATOMIC_OR),
< [__atomic\_xor**(3)](ATOMIC_XOR)
> [**atomic_fetch_and**(3)](ATOMIC_FETCH_AND),
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_ref**(3)](ATOMIC_REF),
> [**atomic_cas**(3)](ATOMIC_CAS),
> **iso_fortran_env**(3),
> [**atomic_add**(3)](ATOMIC_ADD),
> [**atomic_or**(3)](ATOMIC_OR),
> [**atomic_xor**(3)](ATOMIC_XOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_CAS.md _pages/ATOMIC_CAS.md
> ## atomic_cas
< **atomic\_cas**(3) - \[ATOMIC\] Atomic compare and swap
> **atomic_cas**(3) - \[ATOMIC\] Atomic compare and swap
< atomic\_cas compares the variable **atom** with the value of **compare__; if the
< value is the same, **atom** is set to the value of **new__. Additionally, **old** is
> atomic_cas compares the variable **atom** with the value of **compare**; if the
< has stopped, it is assigned the value of iso\_fortran\_env's
< stat\_stopped\_image and if the remote image has failed, the value
< stat\_failed\_image.
> has stopped, it is assigned the value of iso_fortran_env's
> stat_stopped_image and if the remote image has failed, the value
> stat_failed_image.
<     atomic\_int\_kind kind or logical type with atomic\_logical\_kind
<     : Scalar of the same type and kind as **atom__.
<     : Scalar variable of the same type and kind as **atom__.
<     : Scalar variable of the same type as **atom__. If kind is different, the
<     value is converted to the kind of **atom__.
>   atomic_int_kind kind or logical type with atomic_logical_kind
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_ref**(3)](ATOMIC_REF),
< [__iso\_fortran\_env**(3)]()
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_ref**(3)](ATOMIC_REF),
> [**iso_fortran_env**(3)]()
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_DEFINE.md _pages/ATOMIC_DEFINE.md
> ## atomic_define
< **atomic\_define**(3) - \[ATOMIC\] Setting a variable atomically
> **atomic_define**(3) - \[ATOMIC\] Setting a variable atomically
< **atomic\_define(atom, value)** defines the variable **atom** with the value
> **atomic_define(atom, value)** defines the variable **atom** with the value
< successful, it is assigned the value **0__. If it is present and the
< the value of iso\_fortran\_env's stat\_stopped\_image and if the remote
< image has failed, the value stat\_failed\_image.
> the value of iso_fortran_env's stat_stopped_image and if the remote
> image has failed, the value stat_failed_image.
<     atomic\_int\_kind kind or logical type with atomic\_logical\_kind
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind or logical type with atomic_logical_kind
< [__atomic\_ref**(3)](ATOMIC_REF),
< [__atomic\_cas**(3)](ATOMIC_CAS),
< **iso\_fortran\_env**(3),
< [__atomic\_add**(3)](ATOMIC_ADD),
< [__atomic\_and**(3)](ATOMIC_AND),
< [__atomic\_or**(3)](ATOMIC_OR),
< [__atomic\_xor**(3)](ATOMIC_XOR)
> [**atomic_ref**(3)](ATOMIC_REF),
> [**atomic_cas**(3)](ATOMIC_CAS),
> **iso_fortran_env**(3),
> [**atomic_add**(3)](ATOMIC_ADD),
> [**atomic_and**(3)](ATOMIC_AND),
> [**atomic_or**(3)](ATOMIC_OR),
> [**atomic_xor**(3)](ATOMIC_XOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_FETCH_ADD.md _pages/ATOMIC_FETCH_ADD.md
> ## atomic_fetch_add
< **atomic\_fetch\_add**(3) - \[ATOMIC\] Atomic ADD operation with prior fetch
> **atomic_fetch_add**(3) - \[ATOMIC\] Atomic ADD operation with prior fetch
< **atomic\_fetch\_add(atom, value, old)** atomically stores the value of
< **atom** in **old** and adds the value of **var** to the variable **atom__. When **stat** is
< present and the invocation was successful, it is assigned the value **0__.
> **atomic_fetch_add(atom, value, old)** atomically stores the value of
< has stopped, it is assigned the value of iso\_fortran\_env's
< stat\_stopped\_image and if the remote image has failed, the value
< stat\_failed\_image.
> has stopped, it is assigned the value of iso_fortran_env's
> stat_stopped_image and if the remote image has failed, the value
> stat_failed_image.
<     atomic\_int\_kind kind. atomic\_logical\_kind kind.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind. atomic_logical_kind kind.
<     : Scalar of the same type and kind as **atom__.
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_add**(3)](ATOMIC_ADD),
< **iso\_fortran\_env**(3),
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_add**(3)](ATOMIC_ADD),
> **iso_fortran_env**(3),
< [__atomic\_fetch\_and**(3)](ATOMIC_FETCH_AND),
< [__atomic\_fetch\_or**(3)](ATOMIC_FETCH_OR),
> [**atomic_fetch_and**(3)](ATOMIC_FETCH_AND),
> [**atomic_fetch_or**(3)](ATOMIC_FETCH_OR),
< [__atomic\_fetch\_xor**(3)](ATOMIC_FETCH_XOR)
> [**atomic_fetch_xor**(3)](ATOMIC_FETCH_XOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_FETCH_AND.md _pages/ATOMIC_FETCH_AND.md
> ## atomic_fetch_and
< **atomic\_fetch\_and**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise AND operation with prior fetch
> **atomic_fetch_and**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise AND operation with prior fetch
< **atomic\_fetch\_and(atom, value, old)** atomically stores the value of
> **atomic_fetch_and(atom, value, old)** atomically stores the value of
< **atom** and **value__. When **stat** is present and the invocation was successful,
< it is assigned the value **0__. If it is present and the invocation has
< iso\_fortran\_env's stat\_stopped\_image and if the remote image has
< failed, the value stat\_failed\_image.
> iso_fortran_env's stat_stopped_image and if the remote image has
> failed, the value stat_failed_image.
<     atomic\_int\_kind kind.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind.
<     : Scalar of the same type and kind as **atom__.
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_and**(3)](ATOMIC_AND),
< [__iso\_fortran\_env**(3)](),
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_and**(3)](ATOMIC_AND),
> [**iso_fortran_env**(3)](),
< [__atomic\_fetch\_add**(3)](ATOMIC_FETCH_ADD),
< [__atomic\_fetch\_or**(3)](ATOMIC_FETCH_OR),
> [**atomic_fetch_add**(3)](ATOMIC_FETCH_ADD),
> [**atomic_fetch_or**(3)](ATOMIC_FETCH_OR),
< [__atomic\_fetch\_xor**(3)](ATOMIC_FETCH_XOR)
> [**atomic_fetch_xor**(3)](ATOMIC_FETCH_XOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_FETCH_OR.md _pages/ATOMIC_FETCH_OR.md
> ## atomic_fetch_or
< **atomic\_fetch\_or**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise OR operation with prior fetch
> **atomic_fetch_or**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise OR operation with prior fetch
< **atomic\_fetch\_or(atom, value, old)** atomically stores the value of
> **atomic_fetch_or(atom, value, old)** atomically stores the value of
< **atom** and **value__. When **stat** is present and the invocation was successful,
< it is assigned the value **0__. If it is present and the invocation has
< iso\_fortran\_env's stat\_stopped\_image and if the remote image has
< failed, the value stat\_failed\_image.
> iso_fortran_env's stat_stopped_image and if the remote image has
> failed, the value stat_failed_image.
<     atomic\_int\_kind kind.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind.
<     : Scalar of the same type and kind as **atom__.
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_or**(3)](ATOMIC_OR),
< [__iso\_fortran\_env**(3)](),
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_or**(3)](ATOMIC_OR),
> [**iso_fortran_env**(3)](),
< [__atomic\_fetch\_add**(3)](ATOMIC_FETCH_ADD),
< [__atomic\_fetch\_and**(3)](ATOMIC_FETCH_AND),
> [**atomic_fetch_add**(3)](ATOMIC_FETCH_ADD),
> [**atomic_fetch_and**(3)](ATOMIC_FETCH_AND),
< [__atomic\_fetch\_xor**(3)](ATOMIC_FETCH_XOR)
> [**atomic_fetch_xor**(3)](ATOMIC_FETCH_XOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_FETCH_XOR.md _pages/ATOMIC_FETCH_XOR.md
> ## atomic_fetch_xor
< **atomic\_fetch\_xor**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise XOR operation with prior fetch
> **atomic_fetch_xor**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise XOR operation with prior fetch
< **atomic\_fetch\_xor(atom, value, old)** atomically stores the value of
> **atomic_fetch_xor(atom, value, old)** atomically stores the value of
< **atom** and **value__. When **stat** is present and the invocation was successful,
< it is assigned the value **0__. If it is present and the invocation has
< iso\_fortran\_env's stat\_stopped\_image and if the remote image has
< failed, the value stat\_failed\_image.
> iso_fortran_env's stat_stopped_image and if the remote image has
> failed, the value stat_failed_image.
<     atomic\_int\_kind kind.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind.
<     : Scalar of the same type and kind as **atom__.
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_xor**(3)](ATOMIC_XOR),
< [__iso\_fortran\_env**(3)](),
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_xor**(3)](ATOMIC_XOR),
> [**iso_fortran_env**(3)](),
< [__atomic\_fetch\_add**(3)](ATOMIC_FETCH_ADD),
< [__atomic\_fetch\_and**(3)](ATOMIC_FETCH_AND),
> [**atomic_fetch_add**(3)](ATOMIC_FETCH_ADD),
> [**atomic_fetch_and**(3)](ATOMIC_FETCH_AND),
< [__atomic\_fetch\_or**(3)](ATOMIC_FETCH_OR)
> [**atomic_fetch_or**(3)](ATOMIC_FETCH_OR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_OR.md _pages/ATOMIC_OR.md
> ## atomic_or
< **atomic\_or**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise OR operation
> **atomic_or**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise OR operation
< call atomic_or**(atom, value, stat)
> call atomic_or__(atom, value, stat)
< **atomic\_or(atom, value)** atomically defines **atom** with the bitwise **or**
< between the values of **atom** and **value__. When **stat** is present and the
< invocation was successful, it is assigned the value **0__. If it is present
> **atomic_or(atom, value)** atomically defines **atom** with the bitwise **or**
< assigned the value of iso\_fortran\_env's stat\_stopped\_image and if
< the remote image has failed, the value stat\_failed\_image.
> assigned the value of iso_fortran_env's stat_stopped_image and if
> the remote image has failed, the value stat_failed_image.
<     atomic\_int\_kind kind.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind.
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_fetch\_or**(3)](ATOMIC_FETCH),
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_fetch_or**(3)](ATOMIC_FETCH),
< [__iso\_fortran\_env**(3)](),
< [__atomic\_add**(3)](ATOMIC_ADD),
< [__atomic\_or**(3)](ATOMIC_OR),
> [**iso_fortran_env**(3)](),
> [**atomic_add**(3)](ATOMIC_ADD),
> [**atomic_or**(3)](ATOMIC_OR),
< [__atomic\_xor**(3)](ATOMIC_XOR)
> [**atomic_xor**(3)](ATOMIC_XOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_REF.md _pages/ATOMIC_REF.md
> ## atomic_ref
< **atomic\_ref**(3) - \[ATOMIC\] Obtaining the value of a variable atomically
> **atomic_ref**(3) - \[ATOMIC\] Obtaining the value of a variable atomically
< **atomic\_ref(value, atom)** atomically assigns the value of the
< variable **atom** to **value__. When **stat** is present and the invocation was
< successful, it is assigned the value **0__. If it is present and the
> **atomic_ref(value, atom)** atomically assigns the value of the
< the value of iso\_fortran\_env's **stat\_stopped\_image** and if the remote
< image has failed, the value **stat\_failed\_image__.
> the value of iso_fortran_env's **stat_stopped_image** and if the remote
> image has failed, the value **stat_failed_image**.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
<     atomic\_int\_kind kind or logical type with atomic\_logical\_kind
>   atomic_int_kind kind or logical type with atomic_logical_kind
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_cas**(3)](ATOMIC_CAS),
< [__iso\_fortran\_env**(3)](),
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_cas**(3)](ATOMIC_CAS),
> [**iso_fortran_env**(3)](),
< [__atomic\_fetch\_add**(3)](ATOMIC_ADD),
< [__atomic\_fetch\_and**(3)](ATOMIC_AND),
> [**atomic_fetch_add**(3)](ATOMIC_ADD),
> [**atomic_fetch_and**(3)](ATOMIC_AND),
< [__atomic\_fetch\_or**(3)](ATOMIC_OR),
< [__atomic\_fetch\_xor**(3)](ATOMIC_XOR)
> [**atomic_fetch_or**(3)](ATOMIC_OR),
> [**atomic_fetch_xor**(3)](ATOMIC_XOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ATOMIC_XOR.md _pages/ATOMIC_XOR.md
> ## atomic_xor
< **atomic\_xor**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise OR operation
> **atomic_xor**(3) - \[ATOMIC:BIT MANIPULATION\] Atomic bitwise OR operation
< **atomic\_xor(atom, value)** atomically defines **atom** with the bitwise
< **xor** between the values of **atom** and **value__. When **stat** is present and the
< invocation was successful, it is assigned the value **0__. If it is present
> **atomic_xor(atom, value)** atomically defines **atom** with the bitwise
< assigned the value of iso\_fortran\_env's stat\_stopped\_image and if
< the remote image has failed, the value stat\_failed\_image.
> assigned the value of iso_fortran_env's stat_stopped_image and if
> the remote image has failed, the value stat_failed_image.
<     atomic\_int\_kind kind.
<     : Scalar of the same type as **atom__. If the kind is different, the value
<     is converted to the kind of **atom__.
>   atomic_int_kind kind.
< [__atomic\_define**(3)](ATOMIC_DEFINE),
< [__atomic\_fetch\_xor**(3)](ATOMIC_FETCH),
< [__iso\_fortran\_env**(3)](),
< [__atomic\_add**(3)](ATOMIC_ADD),
< [__atomic\_or**(3)](ATOMIC_OR),
< [__atomic\_xor**(3)](ATOMIC_XOR)
> [**atomic_define**(3)](ATOMIC_DEFINE),
> [**atomic_fetch_xor**(3)](ATOMIC_FETCH),
> [**iso_fortran_env**(3)](),
> [**atomic_add**(3)](ATOMIC_ADD),
> [**atomic_or**(3)](ATOMIC_OR),
> [**atomic_xor**(3)](ATOMIC_XOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BESSEL_J0.md _pages/BESSEL_J0.md
> ## bessel_j0
< **bessel\_j0**(3) - \[MATHEMATICS\] Bessel function of the first kind of order 0
> **bessel_j0**(3) - \[MATHEMATICS\] Bessel function of the first kind of order 0
< **bessel\_j0(x)** computes the Bessel function of the first kind
< of order **0** of **x__.
> **bessel_j0(x)** computes the Bessel function of the first kind
<     : The type shall be _real_.
>   : The type shall be _real_.
< The return value is of type _real_ and lies in the range 
< **-0.4027 \<= bessel(0,x) \<= 1__. It has the same kind as **x__.
> The return value is of type _real_ and lies in the range
< [__bessel\_j1**(3)](BESSEL_J1),
< [__bessel\_jn**(3)](BESSEL_JN), 
< [__bessel\_y0**(3)](BESSEL_Y0),
< [__bessel\_y1**(3)](BESSEL_Y1), 
< [__bessel\_yn**(3)](BESSEL_YN)
> [**bessel_j1**(3)](BESSEL_J1),
> [**bessel_jn**(3)](BESSEL_JN),
> [**bessel_y0**(3)](BESSEL_Y0),
> [**bessel_y1**(3)](BESSEL_Y1),
> [**bessel_yn**(3)](BESSEL_YN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BESSEL_J1.md _pages/BESSEL_J1.md
> ## bessel_j1
< **bessel\_j1**(3) - \[MATHEMATICS\] Bessel function of the first kind of order 1
> **bessel_j1**(3) - \[MATHEMATICS\] Bessel function of the first kind of order 1
< **bessel\_j1(x)** computes the Bessel function of the first kind
< of order **1** of **x__.
> **bessel_j1(x)** computes the Bessel function of the first kind
<     : The type shall be _real_.
>   : The type shall be _real_.
< The return value is of type _real_ and lies in the range 
< **-0.5818 \<= bessel(0,x) \<= 0.5818** . It has the same kind as **x__.
> The return value is of type _real_ and lies in the range
< [__bessel\_j0**(3)](BESSEL_J0),
< [__bessel\_jn**(3)](BESSEL_JN), 
< [__bessel\_y0**(3)](BESSEL_Y0),
< [__bessel\_y1**(3)](BESSEL_Y1), 
< [__bessel\_yn**(3)](BESSEL_YN)
> [**bessel_j0**(3)](BESSEL_J0),
> [**bessel_jn**(3)](BESSEL_JN),
> [**bessel_y0**(3)](BESSEL_Y0),
> [**bessel_y1**(3)](BESSEL_Y1),
> [**bessel_yn**(3)](BESSEL_YN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BESSEL_JN.md _pages/BESSEL_JN.md
> ## bessel_jn
< **bessel\_jn**(3) - \[MATHEMATICS\] Bessel function of the first kind
> **bessel_jn**(3) - \[MATHEMATICS\] Bessel function of the first kind
< **bessel\_jn(n, x)** computes the Bessel function of the first
< kind of order **n** of **x__. If **n** and **x** are arrays, their ranks and shapes
> **bessel_jn(n, x)** computes the Bessel function of the first
< **bessel\_jn(n1, n2, x)** returns an array with the Bessel function\|Bessel functions 
< of the first kind of the orders **n1** to **n2__.
> **bessel_jn(n1, n2, x)** returns an array with the Bessel function\|Bessel functions
<     : Shall be a scalar or an array of type _integer_.
>   : Shall be a scalar or an array of type _integer_.
<     : Shall be a non-negative scalar of type _integer_.
>   : Shall be a non-negative scalar of type _integer_.
<     : Shall be a non-negative scalar of type _integer_.
>   : Shall be a non-negative scalar of type _integer_.
<     : Shall be a scalar or an array of type _real_. For 
<     **bessel\_jn(n1, n2, x)** it shall be scalar.
>   : Shall be a scalar or an array of type _real_. For
>   **bessel_jn(n1, n2, x)** it shall be scalar.
< The return value is a scalar of type _real_. It has the same kind as **x__.
> The return value is a scalar of type _real_. It has the same kind as **x**.
< [__bessel\_j0**(3)](BESSEL_J0),
< [__bessel\_j1**(3)](BESSEL_J1),
< [__bessel\_y0**(3)](BESSEL_Y0),
< [__bessel\_y1**(3)](BESSEL_Y1), 
< [__bessel\_yn**(3)](BESSEL_YN)
> [**bessel_j0**(3)](BESSEL_J0),
> [**bessel_j1**(3)](BESSEL_J1),
> [**bessel_y0**(3)](BESSEL_Y0),
> [**bessel_y1**(3)](BESSEL_Y1),
> [**bessel_yn**(3)](BESSEL_YN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BESSEL_Y0.md _pages/BESSEL_Y0.md
> ## bessel_y0
< **bessel\_y0**(3) - \[MATHEMATICS\] Bessel function of the second kind of order 0
> **bessel_y0**(3) - \[MATHEMATICS\] Bessel function of the second kind of order 0
< **bessel\_y0(x)** computes the Bessel function of the second
< kind of order 0 of **x__.
> **bessel_y0(x)** computes the Bessel function of the second
<     : The type shall be _real_.
>   : The type shall be _real_.
< The return value is of type _real_. It has the same kind as **x__.
> The return value is of type _real_. It has the same kind as **x**.
< [__bessel\_j0**(3)](BESSEL_J0),
< [__bessel\_j1**(3)](BESSEL_J1),
< [__bessel\_jn**(3)](BESSEL_JN), 
< [__bessel\_y1**(3)](BESSEL_Y1), 
< [__bessel\_yn**(3)](BESSEL_YN)
> [**bessel_j0**(3)](BESSEL_J0),
> [**bessel_j1**(3)](BESSEL_J1),
> [**bessel_jn**(3)](BESSEL_JN),
> [**bessel_y1**(3)](BESSEL_Y1),
> [**bessel_yn**(3)](BESSEL_YN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BESSEL_Y1.md _pages/BESSEL_Y1.md
> ## bessel_y1
< **bessel\_y1**(3) - \[MATHEMATICS\] Bessel function of the second kind of order 1
> **bessel_y1**(3) - \[MATHEMATICS\] Bessel function of the second kind of order 1
< **bessel\_y1(x)** computes the Bessel function of the second
< kind of order 1 of **x__.
> **bessel_y1(x)** computes the Bessel function of the second
<     : The type shall be _real_.
>   : The type shall be _real_.
< The return value is _real_. It has the same kind as **x__.
> The return value is _real_. It has the same kind as **x**.
< [__bessel\_j0**(3)](BESSEL_J0),
< [__bessel\_j1**(3)](BESSEL_J1),
< [__bessel\_jn**(3)](BESSEL_JN), 
< [__bessel\_y0**(3)](BESSEL_Y0),
< [__bessel\_yn**(3)](BESSEL_YN)
> [**bessel_j0**(3)](BESSEL_J0),
> [**bessel_j1**(3)](BESSEL_J1),
> [**bessel_jn**(3)](BESSEL_JN),
> [**bessel_y0**(3)](BESSEL_Y0),
> [**bessel_yn**(3)](BESSEL_YN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BESSEL_YN.md _pages/BESSEL_YN.md
> ## bessel_yn
< **bessel\_yn**(3) - \[MATHEMATICS\] Bessel function of the second kind
> **bessel_yn**(3) - \[MATHEMATICS\] Bessel function of the second kind
< **bessel\_yn(n, x)** computes the Bessel function of the second
< kind of order **n** of **x__. If **n** and **x** are arrays, their ranks and shapes
> **bessel_yn(n, x)** computes the Bessel function of the second
< **bessel\_yn(n1, n2, x)** returns an array with the Bessel
< function\|Bessel functions of the first kind of the orders **n1** to **n2__.
> **bessel_yn(n1, n2, x)** returns an array with the Bessel
<     : Shall be a scalar or an array of type _integer_.
>   : Shall be a scalar or an array of type _integer_.
<     : Shall be a non-negative scalar of type _integer_.
>   : Shall be a non-negative scalar of type _integer_.
<     : Shall be a non-negative scalar of type _integer_.
>   : Shall be a non-negative scalar of type _integer_.
<     : Shall be a scalar or an array of type _real_; for 
<     **bessel\_yn(n1, n2, x)** it shall be scalar.
>   : Shall be a scalar or an array of type _real_; for
>   **bessel_yn(n1, n2, x)** it shall be scalar.
< The return value is _real_. It has the same kind as **x__.
> The return value is _real_. It has the same kind as **x**.
< [__bessel\_j0**(3)](BESSEL_J0),
< [__bessel\_j1**(3)](BESSEL_J1),
< [__bessel\_jn**(3)](BESSEL_JN),
< [__bessel\_y0**(3)](BESSEL_Y0),
< [__bessel\_y1**(3)](BESSEL_Y1)
> [**bessel_j0**(3)](BESSEL_J0),
> [**bessel_j1**(3)](BESSEL_J1),
> [**bessel_jn**(3)](BESSEL_JN),
> [**bessel_y0**(3)](BESSEL_Y0),
> [**bessel_y1**(3)](BESSEL_Y1)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BGE.md _pages/BGE.md
<     : Shall be of _integer_ type.
>   : Shall be of _integer_ type.
<     : Shall be of _integer_ type, and of the same kind as **i__.
>   : Shall be of _integer_ type, and of the same kind as **i**.
< [__bgt**(3)](BGT),
< [__ble**(3)](BLE),
< [__blt**(3)](BIT)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BGT.md _pages/BGT.md
<     : Shall be of _integer_ type or a BOZ literal constant.
>   : Shall be of _integer_ type or a BOZ literal constant.
<     : Shall be of _integer_ type, and of the same kind as **i__; or a BOZ
>   : Shall be of _integer_ type, and of the same kind as **i**; or a BOZ
< [__bge**(3),](BGE),
< [__ble**(3),](BLE),
< [__blt**(3)](BLT)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BIT_index.md _pages/BIT_index.md
> permalink: /learn/intrinsics/BIT_index
< | *BIT:COMPARE*  ||||| [__bge__]({{site.baseurl}}/learn/intrinsics/BGE)                     || &#9679; Bitwise greater than or equal to             |
< | *BIT:COMPARE*  ||||| [__bgt__]({{site.baseurl}}/learn/intrinsics/BGT)                     || &#9679; Bitwise greater than                         |
< | *BIT:COMPARE*  ||||| [__ble__]({{site.baseurl}}/learn/intrinsics/BLE)                     || &#9679; Bitwise less than or equal to                |
< | *BIT:COMPARE*  ||||| [__blt__]({{site.baseurl}}/learn/intrinsics/BLT)                     || &#9679; Bitwise less than                            |
< | *BIT:INQUIRY*  ||||| [__bit\_size__]({{site.baseurl}}/learn/intrinsics/BIT_SIZE)          || &#9679; Bit size inquiry function                    |
< | *BIT:INQUIRY*  ||||| [__btest__]({{site.baseurl}}/learn/intrinsics/BTEST)                 || &#9679; Bit test function                            |
< | *BIT:INQUIRY*  ||||| [__storage\_size__]({{site.baseurl}}/learn/intrinsics/STORAGE_SIZE)  || &#9679; Storage size in bits                         |
< | *BIT:COUNT*    ||||| [__leadz__]({{site.baseurl}}/learn/intrinsics/LEADZ)                 || &#9679; Number of leading zero bits of an integer    |
< | *BIT:COUNT*    ||||| [__popcnt__]({{site.baseurl}}/learn/intrinsics/POPCNT)               || &#9679; Number of bits set                           |
< | *BIT:COUNT*    ||||| [__poppar__]({{site.baseurl}}/learn/intrinsics/POPPAR)               || &#9679; Parity of the number of bits set             |
< | *BIT:COUNT*    ||||| [__trailz__]({{site.baseurl}}/learn/intrinsics/TRAILZ)               || &#9679; Number of trailing zero bits of an integer   |
< | *BIT:COPY*     ||||| [__dshiftl__]({{site.baseurl}}/learn/intrinsics/DSHIFTL)             || &#9679; Combines bits of arguments **i** and **j**   |
< | *BIT:COPY*     ||||| [__dshiftr__]({{site.baseurl}}/learn/intrinsics/DSHIFTR)             || &#9679; Combines bits of arguments **i** and **j**   |
< | *BIT:COPY*     ||||| [__merge\_bits__]({{site.baseurl}}/learn/intrinsics/MERGE_BITS)      || &#9679; Merge of bits under mask                     |
< | *BIT:COPY*     ||||| [__mvbits__]({{site.baseurl}}/learn/intrinsics/MVBITS)               || &#9679; Move bits from one integer to another        |
< | *BIT:COPY*     ||||| [__ibits__]({{site.baseurl}}/learn/intrinsics/IBITS)                 || &#9679; Bit extraction                               |
< | *BIT:SET*      ||||| [__ibclr__]({{site.baseurl}}/learn/intrinsics/IBCLR)                 || &#9679; Clear bit                                    |
< | *BIT:SET*      ||||| [__ibset__]({{site.baseurl}}/learn/intrinsics/IBSET)                 || &#9679; Set bit                                      |
< | *BIT:SET*      ||||| [__maskl__]({{site.baseurl}}/learn/intrinsics/MASKL)                 || &#9679; Left justified mask                          |
< | *BIT:SET*      ||||| [__maskr__]({{site.baseurl}}/learn/intrinsics/MASKR)                 || &#9679; Right justified mask                         |
< | *BIT:LOGICAL*  ||||| [__iparity__]({{site.baseurl}}/learn/intrinsics/IPARITY)             || &#9679; Bitwise exclusive or of array elements       |
< | *BIT:LOGICAL*  ||||| [__iall__]({{site.baseurl}}/learn/intrinsics/IALL)                   || &#9679; Bitwise and of array elements                |
< | *BIT:LOGICAL*  ||||| [__iand__]({{site.baseurl}}/learn/intrinsics/IAND)                   || &#9679; Bitwise logical and                          |
< | *BIT:LOGICAL*  ||||| [__iany__]({{site.baseurl}}/learn/intrinsics/IANY)                   || &#9679; Bitwise or of array elements                 |
< | *BIT:LOGICAL*  ||||| [__ieor__]({{site.baseurl}}/learn/intrinsics/IEOR)                   || &#9679; Bitwise logical exclusive or                 |
< | *BIT:LOGICAL*  ||||| [__ior__]({{site.baseurl}}/learn/intrinsics/IOR)                     || &#9679; Bitwise logical inclusive or                 |
< | *BIT:LOGICAL*  ||||| [__not__]({{site.baseurl}}/learn/intrinsics/NOT)                     || &#9679; Logical negation                             |
< | *BIT:SHIFT*    ||||| [__ishftc__]({{site.baseurl}}/learn/intrinsics/ISHFTC)               || &#9679; Shift bits circularly                        |
< | *BIT:SHIFT*    ||||| [__ishft__]({{site.baseurl}}/learn/intrinsics/ISHFT)                 || &#9679; Shift bits                                   |
< | *BIT:SHIFT*    ||||| [__shifta__]({{site.baseurl}}/learn/intrinsics/SHIFTA)               || &#9679; Shift bits right with fill                   |
< | *BIT:SHIFT*    ||||| [__shiftl__]({{site.baseurl}}/learn/intrinsics/SHIFTL)               || &#9679; Shift bits left                              |
< | *BIT:SHIFT*    ||||| [__shiftr__]({{site.baseurl}}/learn/intrinsics/SHIFTR)               || &#9679; Shift bits right                             |
> | _BIT:COMPARE_ ||||| [**bge**]({{site.baseurl}}/learn/intrinsics/BGE) || &#9679; Bitwise greater than or equal to |
> | _BIT:COMPARE_ ||||| [**bgt**]({{site.baseurl}}/learn/intrinsics/BGT) || &#9679; Bitwise greater than |
> | _BIT:COMPARE_ ||||| [**ble**]({{site.baseurl}}/learn/intrinsics/BLE) || &#9679; Bitwise less than or equal to |
> | _BIT:COMPARE_ ||||| [**blt**]({{site.baseurl}}/learn/intrinsics/BLT) || &#9679; Bitwise less than |
> | _BIT:INQUIRY_ ||||| [**bit_size**]({{site.baseurl}}/learn/intrinsics/BIT_SIZE) || &#9679; Bit size inquiry function |
> | _BIT:INQUIRY_ ||||| [**btest**]({{site.baseurl}}/learn/intrinsics/BTEST) || &#9679; Bit test function |
> | _BIT:INQUIRY_ ||||| [**storage_size**]({{site.baseurl}}/learn/intrinsics/STORAGE_SIZE) || &#9679; Storage size in bits |
> | _BIT:COUNT_ ||||| [**leadz**]({{site.baseurl}}/learn/intrinsics/LEADZ) || &#9679; Number of leading zero bits of an integer |
> | _BIT:COUNT_ ||||| [**popcnt**]({{site.baseurl}}/learn/intrinsics/POPCNT) || &#9679; Number of bits set |
> | _BIT:COUNT_ ||||| [**poppar**]({{site.baseurl}}/learn/intrinsics/POPPAR) || &#9679; Parity of the number of bits set |
> | _BIT:COUNT_ ||||| [**trailz**]({{site.baseurl}}/learn/intrinsics/TRAILZ) || &#9679; Number of trailing zero bits of an integer |
> | _BIT:COPY_ ||||| [**dshiftl**]({{site.baseurl}}/learn/intrinsics/DSHIFTL) || &#9679; Combines bits of arguments **i** and **j** |
> | _BIT:COPY_ ||||| [**dshiftr**]({{site.baseurl}}/learn/intrinsics/DSHIFTR) || &#9679; Combines bits of arguments **i** and **j** |
> | _BIT:COPY_ ||||| [**merge_bits**]({{site.baseurl}}/learn/intrinsics/MERGE_BITS) || &#9679; Merge of bits under mask |
> | _BIT:COPY_ ||||| [**mvbits**]({{site.baseurl}}/learn/intrinsics/MVBITS) || &#9679; Move bits from one integer to another |
> | _BIT:COPY_ ||||| [**ibits**]({{site.baseurl}}/learn/intrinsics/IBITS) || &#9679; Bit extraction |
> | _BIT:SET_ ||||| [**ibclr**]({{site.baseurl}}/learn/intrinsics/IBCLR) || &#9679; Clear bit |
> | _BIT:SET_ ||||| [**ibset**]({{site.baseurl}}/learn/intrinsics/IBSET) || &#9679; Set bit |
> | _BIT:SET_ ||||| [**maskl**]({{site.baseurl}}/learn/intrinsics/MASKL) || &#9679; Left justified mask |
> | _BIT:SET_ ||||| [**maskr**]({{site.baseurl}}/learn/intrinsics/MASKR) || &#9679; Right justified mask |
> | _BIT:LOGICAL_ ||||| [**iparity**]({{site.baseurl}}/learn/intrinsics/IPARITY) || &#9679; Bitwise exclusive or of array elements |
> | _BIT:LOGICAL_ ||||| [**iall**]({{site.baseurl}}/learn/intrinsics/IALL) || &#9679; Bitwise and of array elements |
> | _BIT:LOGICAL_ ||||| [**iand**]({{site.baseurl}}/learn/intrinsics/IAND) || &#9679; Bitwise logical and |
> | _BIT:LOGICAL_ ||||| [**iany**]({{site.baseurl}}/learn/intrinsics/IANY) || &#9679; Bitwise or of array elements |
> | _BIT:LOGICAL_ ||||| [**ieor**]({{site.baseurl}}/learn/intrinsics/IEOR) || &#9679; Bitwise logical exclusive or |
> | _BIT:LOGICAL_ ||||| [**ior**]({{site.baseurl}}/learn/intrinsics/IOR) || &#9679; Bitwise logical inclusive or |
> | _BIT:LOGICAL_ ||||| [**not**]({{site.baseurl}}/learn/intrinsics/NOT) || &#9679; Logical negation |
> | _BIT:SHIFT_ ||||| [**ishftc**]({{site.baseurl}}/learn/intrinsics/ISHFTC) || &#9679; Shift bits circularly |
> | _BIT:SHIFT_ ||||| [**ishft**]({{site.baseurl}}/learn/intrinsics/ISHFT) || &#9679; Shift bits |
> | _BIT:SHIFT_ ||||| [**shifta**]({{site.baseurl}}/learn/intrinsics/SHIFTA) || &#9679; Shift bits right with fill |
> | _BIT:SHIFT_ ||||| [**shiftl**]({{site.baseurl}}/learn/intrinsics/SHIFTL) || &#9679; Shift bits left |
> | _BIT:SHIFT_ ||||| [**shiftr**]({{site.baseurl}}/learn/intrinsics/SHIFTR) || &#9679; Shift bits right |
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BIT_SIZE.md _pages/BIT_SIZE.md
> ## bit_size
< **bit\_size**(3) - \[BIT:INQUIRY\] Bit size inquiry function
> **bit_size**(3) - \[BIT:INQUIRY\] Bit size inquiry function
< **bit\_size(i)** returns the number of bits (integer precision plus sign
< bit) represented by the type of the _integer_ **i__.  **i** can be a
> **bit_size(i)** returns the number of bits (integer precision plus sign
> bit) represented by the type of the _integer_ **i**. **i** can be a
<     : An _integer_ value of any kind to determine the size of in bits.
>   : An _integer_ value of any kind to determine the size of in bits.
<     of **i__.  The result is a _integer_ scalar of the same kind as **i__.
>     of __i__.  The result is a _integer_ scalar of the same kind as __i__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BLE.md _pages/BLE.md
<     : Shall be of _integer_ type.
>   : Shall be of _integer_ type.
<     : Shall be of _integer_ type, and of the same kind as **i__.
>   : Shall be of _integer_ type, and of the same kind as **i**.
< [__bge**(3),](BGE),
< [__bgt**(3),](BGT),
< [__blt**(3)](BLT)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BLT.md _pages/BLT.md
<     : Shall be of _integer_ type.
>   : Shall be of _integer_ type.
<     : Shall be of _integer_ type, and of the same kind as **i__.
>   : Shall be of _integer_ type, and of the same kind as **i**.
< [__bge**(3)](BGE),
< [__bgt**(3)](BGT),
< [__ble**(3)](BLE)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/BTEST.md _pages/BTEST.md
<  where **KIND** is any _integer_ kind supported by the programming environment.
> where **KIND** is any _integer_ kind supported by the programming environment.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     value **i__; ie.  **0 <= pos <= bit_size(i)** .
>   value **i**; ie. **0 <= pos <= bit_size(i)** .
<    The result is a _logical_ that has the value **.true.** if bit
<    **.false.** if bit **pos** of **i** has the value **0__.
> The result is a _logical_ that has the value **.true.** if bit
< **______________^____^___^____**
> ________________^____^___^______
< ^^^^^^^^^^^^^^^^_^^^^_^^^^____**
> ^^^^^^^^^^^^^^^^_^^^^_^^^^______
< [__ieor**(3)](IEOR),
< [__ibclr**(3)](IBCLR),
< [__not**(3)](NOT),
< [__ibclr**(3)](IBCLR),
< [__ibits**(3)](IBITS),
< [__ibset**(3)](IBSET),
< [__iand**(3)](IAND),
< [__ior**(3)](IOR),
< [__ieor**(3)](IEOR),
< [__mvbits**(3)](MVBITS)
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: .cache
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/C_ASSOCIATED.md _pages/C_ASSOCIATED.md
> ## c_associated
< **c\_associated**(3) - \[ISO\_C\_BINDING\] Status of a C pointer
> **c_associated**(3) - \[ISO_C_BINDING\] Status of a C pointer
< **c\_associated(c\_prt\_1\[, c\_ptr\_2\])** determines the status of the
< C pointer c\_ptr\_1 or if c\_ptr\_1 is associated with the target
< c\_ptr\_2.
> **c_associated(c_prt_1\[, c_ptr_2\])** determines the status of the
> C pointer c_ptr_1 or if c_ptr_1 is associated with the target
> c_ptr_2.
<   - **c\_ptr\_1**
<     : Scalar of the type c\_ptr or c\_funptr.
> - **c_ptr_1**
>   : Scalar of the type c_ptr or c_funptr.
<   - **c\_ptr\_2**
<     : (Optional) Scalar of the same type as c\_ptr\_1.
> - **c_ptr_2**
>   : (Optional) Scalar of the same type as c_ptr_1.
< The return value is of type _logical_; it is .false. if either c\_ptr\_1
< is a C NULL pointer or if c\_ptr1 and c\_ptr\_2 point to different
> The return value is of type _logical_; it is .false. if either c_ptr_1
> is a C NULL pointer or if c_ptr1 and c_ptr_2 point to different
< [__c\_loc**(3)](C_LOC),
< [__c\_funloc**(3)](C_FUNLOC),
< **iso\_c\_binding**(3)
> [**c_loc**(3)](C_LOC),
> [**c_funloc**(3)](C_FUNLOC),
> **iso_c_binding**(3)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CEILING.md _pages/CEILING.md
< **ceiling(a)** returns the least integer greater than or equal to **a__.
<     : The type shall be _real_.
>   : The type shall be _real_.
<     : An _integer_ initialization expression indicating the kind
>   : An _integer_ initialization expression indicating the kind
< [__floor**(3)](FLOOR),
< [__nint**(3)](NINT)
< [__aint**(3)](AINT),
< [__anint**(3)](ANINT),
< [__int**(3)](INT),
< [__selected_int_kind**(3)](SELECTED_INT_KIND)
> [**selected_int_kind**(3)](SELECTED_INT_KIND)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/C_F_POINTER.md _pages/C_F_POINTER.md
> ## c_f_pointer
< **c\_f\_pointer**(3) - \[ISO\_C\_BINDING\] Convert C into Fortran pointer
> **c_f_pointer**(3) - \[ISO_C_BINDING\] Convert C into Fortran pointer
< **c\_f\_pointer(cptr, fptr\[, shape\])** Assign the target, the C
> **c_f_pointer(cptr, fptr\[, shape\])** Assign the target, the C
<     : scalar of the type c\_ptr. It is **intent(in)__.
>   : scalar of the type c_ptr. It is **intent(in)**.
<     : pointer interoperable with **cptr__. it is **intent(out)__.
<     : (Optional) Rank-one array of type _integer_ with **intent(in)** .
<     must be equal to the rank of **fptr__.
>   : (Optional) Rank-one array of type _integer_ with **intent(in)** .
< [__c\_loc**(3)](C_LOC),
< [__c\_f\_procpointer**(3)](C_F_PROCPOINTER),
< **iso\_c\_binding**(3)
> [**c_loc**(3)](C_LOC),
> [**c_f_procpointer**(3)](C_F_PROCPOINTER),
> **iso_c_binding**(3)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/C_F_PROCPOINTER.md _pages/C_F_PROCPOINTER.md
> ## c_f_procpointer
< **c\_f\_procpointer**(3) - \[ISO\_C\_BINDING\] Convert C into Fortran procedure pointer
> **c_f_procpointer**(3) - \[ISO_C_BINDING\] Convert C into Fortran procedure pointer
< **c\_f\_procpointer(cptr, fptr)** assigns the target of the C function
< pointer **cptr** to the Fortran procedure pointer **fptr__.
> **c_f_procpointer(cptr, fptr)** assigns the target of the C function
<     : scalar of the type c\_funptr. It is **intent(in)__.
>   : scalar of the type c_funptr. It is **intent(in)**.
<     : procedure pointer interoperable with **cptr__. It is **intent(out)__.
< [__c\_loc**(3)](C_LOC),
< [__c\_f\_pointer**(3)](C_F_POINTER),
< **iso\_c\_binding**(3)
> [**c_loc**(3)](C_LOC),
> [**c_f_pointer**(3)](C_F_POINTER),
> **iso_c_binding**(3)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/C_FUNLOC.md _pages/C_FUNLOC.md
> ## c_funloc
< **c\_funloc**(3) - \[ISO\_C\_BINDING\] Obtain the C address of a procedure
> **c_funloc**(3) - \[ISO_C_BINDING\] Obtain the C address of a procedure
< **c\_funloc(x)** determines the C address of the argument.
> **c_funloc(x)** determines the C address of the argument.
< The return value is of type c\_funptr and contains the C address of the
> The return value is of type c_funptr and contains the C address of the
< [__c\_associated**(3)](C_ASSOCIATED),
< [__c\_loc**(3)](C_LOC),
< [__c\_f\_pointer**(3)](C_F_POINTER),
> [**c_associated**(3)](C_ASSOCIATED),
> [**c_loc**(3)](C_LOC),
> [**c_f_pointer**(3)](C_F_POINTER),
< [__c\_f\_procpointer**(3)](C_F_PROCPOINTER),
< **iso\_c\_binding**(3)
> [**c_f_procpointer**(3)](C_F_PROCPOINTER),
> **iso_c_binding**(3)
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: CHARACTER_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CHAR.md _pages/CHAR.md
< **char(i, kind)** returns the character represented by the integer **i__.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< See [__ichar**(3)](CHAR) for a discussion of converting between numerical
< [__achar**(3)](ACHAR),
< [__iachar**(3)](IACHAR),
< [__ichar**(3)](ICHAR)
<     [__adjustl**(3)](ADJUSTL), [__adjustr**(3)](ADJUSTR), [__index**(3)](INDEX), 
<     [__scan**(3)](SCAN), [__verify**(3)](VERIFY)
<     [__len\_trim**(3)](LEN_TRIM),
<     [__len**(3)](LEN),
<     [__repeat**(3)](REPEAT), [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: C_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/C_LOC.md _pages/C_LOC.md
> ## c_loc
< **c\_loc**(3) - \[ISO\_C\_BINDING\] Obtain the C address of an object
> **c_loc**(3) - \[ISO_C_BINDING\] Obtain the C address of an object
< **c\_loc(x)** determines the C address of the argument.
> **c_loc(x)** determines the C address of the argument.
<     : Shall have either the _pointer_ or _target_ attribute. It shall not be a
>   : Shall have either the _pointer_ or _target_ attribute. It shall not be a
< The return value is of type c\_ptr and contains the C address of the
> The return value is of type c_ptr and contains the C address of the
< [__c\_associated**(3)](C_ASSOCIATED),
< [__c\_funloc**(3)](C_FUNLOC),
< [__c\_f\_pointer**(3)](C_F_POINTER),
> [**c_associated**(3)](C_ASSOCIATED),
> [**c_funloc**(3)](C_FUNLOC),
> [**c_f_pointer**(3)](C_F_POINTER),
< [__c\_f\_procpointer**(3)](C_F_PROCPOINTER),
< **iso\_c\_binding**(3)
> [**c_f_procpointer**(3)](C_F_PROCPOINTER),
> **iso_c_binding**(3)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CMPLX.md _pages/CMPLX.md
< **y** is not present then the imaginary component is set to **0.0__.
< that is type **complex(kind=KIND(0.0))__.
< This means \`__cmplx(d1,d2)__', where **\`d1'** and **\`d2'** are
<     The type may be _integer_, _real_, or _complex_.
>   The type may be _integer_, _real_, or _complex_.
<     (Optional; only allowed if **x** is not _complex_.). May be _integer_ or
<     _real_.
<     (Optional) An _integer_ initialization expression indicating the kind
>   (Optional; only allowed if **x** is not _complex_.). May be _integer_ or
>   _real_.
>   (Optional) An _integer_ initialization expression indicating the kind
< _complex_ kind, regardless of the kinds of **x** and **y__.
> _complex_ kind, regardless of the kinds of **x** and **y**.
<   - [__aimag**(3)](AIMAG) - Imaginary part of complex number
<   - [__cmplx**(3)](CMPLX) - Complex conversion function
<   - [__conjg**(3)](CONJG) - Complex conjugate function
<   - [__real**(3)](REAL) - Convert to real type
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CO_BROADCAST.md _pages/CO_BROADCAST.md
> ## co_broadcast
< **co\_broadcast**(3) - \[COLLECTIVE\] Copy a value to all images the current set of images
> **co_broadcast**(3) - \[COLLECTIVE\] Copy a value to all images the current set of images
< **co\_broadcast(3)** copies the value of argument **a** on the image with image
< index source\_image to all images in the current team. **a** becomes defined
> **co_broadcast(3)** copies the value of argument **a** on the image with image
> index source_image to all images in the current team. **a** becomes defined
<   - **source\_image**
> - **source_image**
< [__co\_max**(3)](CO_MAX),
< [__co\_min**(3)](CO_MIN),
< [__co\_sum**(3)](CO_SUM),
< [__co\_reduce**(3)](CO_REDUCE)
> [**co_max**(3)](CO_MAX),
> [**co_min**(3)](CO_MIN),
> [**co_sum**(3)](CO_SUM),
> [**co_reduce**(3)](CO_REDUCE)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CO_LBOUND.md _pages/CO_LBOUND.md
> ## co_lbound
< **co\_lbound**(3) - \[COLLECTIVE\] Lower codimension bounds of an array
> **co_lbound**(3) - \[COLLECTIVE\] Lower codimension bounds of an array
<     : (Optional) Shall be a scalar _integer_.
>   : (Optional) Shall be a scalar _integer_.
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind** is absent,
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
< result is an array of the lower cobounds of **coarray__. If **dim** is present,
< [__co\_ubound**(3)](CO_UBOUND),
< [__lbound**(3)](LBOUND)
> [**co_ubound**(3)](CO_UBOUND),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CO_MAX.md _pages/CO_MAX.md
> ## co_max
< **co\_max**(3) - \[COLLECTIVE\] Maximal value on the current set of images
> **co_max**(3) - \[COLLECTIVE\] Maximal value on the current set of images
< co\_max determines element-wise the maximal value of **a** on all images of
< the current team. If result\_image is present, the maximum values are
> co_max determines element-wise the maximal value of **a** on all images of
> the current team. If result_image is present, the maximum values are
< other images become undefined. If result\_image is not present, the
> other images become undefined. If result_image is not present, the
<   - **result\_image**
> - **result_image**
< [__co\_min**(3)](CO_MIN),
< [__co\_sum**(3)](CO_SUM),
< [__co\_reduce**(3)](CO_REDUCE),
< [__co\_broadcast**(3)](CO_BROADCAST)
> [**co_min**(3)](CO_MIN),
> [**co_sum**(3)](CO_SUM),
> [**co_reduce**(3)](CO_REDUCE),
> [**co_broadcast**(3)](CO_BROADCAST)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CO_MIN.md _pages/CO_MIN.md
> ## co_min
< **co\_min**(3) - \[COLLECTIVE\] Minimal value on the current set of images
> **co_min**(3) - \[COLLECTIVE\] Minimal value on the current set of images
< co\_min determines element-wise the minimal value of **a** on all images of
< the current team. If result\_image is present, the minimal values are
> co_min determines element-wise the minimal value of **a** on all images of
> the current team. If result_image is present, the minimal values are
< other images become undefined. If result\_image is not present, the
> other images become undefined. If result_image is not present, the
<   - **result\_image**
> - **result_image**
< [__co\_max**(3)](CO_MAX),
< [__co\_sum**(3)](CO_SUM),
< [__co\_reduce**(3)](CO_REDUCE),
< [__co\_broadcast**(3)](CO_BROADCAST)
> [**co_max**(3)](CO_MAX),
> [**co_sum**(3)](CO_SUM),
> [**co_reduce**(3)](CO_REDUCE),
> [**co_broadcast**(3)](CO_BROADCAST)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/COMMAND_ARGUMENT_COUNT.md _pages/COMMAND_ARGUMENT_COUNT.md
> ## command_argument_count
< **command\_argument\_count**(3) - \[SYSTEM:COMMAND LINE\] Get number of command line arguments
> **command_argument_count**(3) - \[SYSTEM:COMMAND LINE\] Get number of command line arguments
<    **command\_argument\_count()** returns the number of arguments passed
> **command_argument_count()** returns the number of arguments passed
<     : The return value is of type default _integer_. It is the number of
>   : The return value is of type default _integer_. It is the number of
< [__get\_command**(3)](GET_COMMAND),
< [__get\_command\_argument**(3)](GET_COMMAND_ARGUMENT)
> [**get_command**(3)](GET_COMMAND),
> [**get_command_argument**(3)](GET_COMMAND_ARGUMENT)
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: COMPILER_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/COMPILER_OPTIONS.md _pages/COMPILER_OPTIONS.md
> ## compiler_options
< **compiler\_options**(3) - \[COMPILER INQUIRY\] Options passed to the compiler
> **compiler_options**(3) - \[COMPILER INQUIRY\] Options passed to the compiler
< compiler\_options returns a string with the options used for compiling.
> compiler_options returns a string with the options used for compiling.
< the compiler\_options intrinsic.
> the compiler_options intrinsic.
< [__compiler\_version**(3)](COMPILER_VERSION),
< **iso\_fortran\_env**(7)
> [**compiler_version**(3)](COMPILER_VERSION),
> **iso_fortran_env**(7)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/COMPILER_VERSION.md _pages/COMPILER_VERSION.md
> ## compiler_version
< **compiler\_version**(3) - \[COMPILER INQUIRY\] Compiler version string
> **compiler_version**(3) - \[COMPILER INQUIRY\] Compiler version string
< **compiler\_version**(3) returns a string containing the name and
> **compiler_version**(3) returns a string containing the name and
< [__compiler\_options**(3)](COMPILER_OPTIONS),
< **iso\_fortran\_env**(7)
> [**compiler_options**(3)](COMPILER_OPTIONS),
> **iso_fortran_env**(7)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CONJG.md _pages/CONJG.md
< **conjg(z)** returns the complex conjugate of the _complex_ value **z__. 
> **conjg(z)** returns the complex conjugate of the _complex_ value **z**.
< In mathematics, the complex conjugate of a complex_ number is the number
> In mathematics, the complex conjugate of a complex\_ number is the number
< That is, If **z** is **(x, y)** then the result is **(x, -y)__.
< element-by-element conjugation of **array__; not the conjugate transpose
<     : The type shall be _complex_.
>   : The type shall be _complex_.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CO_REDUCE.md _pages/CO_REDUCE.md
> ## co_reduce
< **co\_reduce**(3) - \[COLLECTIVE\] Reduction of values on the current set of images
> **co_reduce**(3) - \[COLLECTIVE\] Reduction of values on the current set of images
< co\_reduce determines element-wise the reduction of the value of **a** on
> co_reduce determines element-wise the reduction of the value of **a** on
< result\_image is present, the result values are returned in **a** on the
> result_image is present, the result values are returned in **a** on the
< undefined. If result\_image is not present, the value is returned on all
> undefined. If result_image is not present, the value is returned on all
<     be nonpolymorphic and have the same type and type parameters as **a__.
<     and type parameters as **a__. The function shall be the same on all
<         result\_image
>     result_image
< [__co\_min**(3)](CO_MIN),
< [__co\_max**(3)](CO_MAX),
< [__co\_sum**(3)](CO_SUM),
< [__co\_broadcast**(3)](CO_BROADCAST)
> [**co_min**(3)](CO_MIN),
> [**co_max**(3)](CO_MAX),
> [**co_sum**(3)](CO_SUM),
> [**co_broadcast**(3)](CO_BROADCAST)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/COSH.md _pages/COSH.md
< where TYPE may be _real_ or _complex_ and KIND may be any 
> where TYPE may be _real_ or _complex_ and KIND may be any
< will be the same type and kind as the input value **x__.
< **cosh(x)** computes the hyperbolic cosine of **x__.
<     : The type shall be _real_ or _complex_.
>   : The type shall be _real_ or _complex_.
< The return value has same type and kind as **x__. If **x** is _complex_, the
> The return value has same type and kind as **x**. If **x** is _complex_, the
< If **x** is _real_, the return value has a lower bound of one, 
< **cosh(x) \>= 1__.
> If **x** is _real_, the return value has a lower bound of one,
< Inverse function: [__acosh**(3)](ACOSH)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/COS.md _pages/COS.md
<     : The type shall be _real_ or _complex_.
>   : The type shall be _real_ or _complex_.
< The return value is of the same type and kind as **x__. 
< [__acos**(3)](ACOS),
< [__sin**(3)](SIN),
< [__tan**(3)](TAN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CO_SUM.md _pages/CO_SUM.md
> ## co_sum
< **co\_sum**(3) - \[COLLECTIVE\] Sum of values on the current set of images
> **co_sum**(3) - \[COLLECTIVE\] Sum of values on the current set of images
< co\_sum sums up the values of each element of **a** on all images of the
< current team. If result\_image is present, the summed-up values are
> co_sum sums up the values of each element of **a** on all images of the
> current team. If result_image is present, the summed-up values are
< other images become undefined. If result\_image is not present, the
> other images become undefined. If result_image is not present, the
<   - **result\_image**
> - **result_image**
< [__co\_max**(3)](CO_MAX),
< [__co\_min**(3)](CO_MIN),
< [__co\_reduce**(3)](CO_REDUCE),
< [__co\_broadcast**(3)](CO_BROADCAST)
> [**co_max**(3)](CO_MAX),
> [**co_min**(3)](CO_MIN),
> [**co_reduce**(3)](CO_REDUCE),
> [**co_broadcast**(3)](CO_BROADCAST)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CO_UBOUND.md _pages/CO_UBOUND.md
> ## co_ubound
< **co\_ubound**(3) - \[COLLECTIVE\] Upper codimension bounds of an array
> **co_ubound**(3) - \[COLLECTIVE\] Upper codimension bounds of an array
<     : (Optional) Shall be a scalar _integer_.
>   : (Optional) Shall be a scalar _integer_.
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind** is absent,
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
< result is an array of the lower cobounds of **coarray__. If **dim** is present,
< [__co\_lbound**(3)](CO_LBOUND),
< [__lbound**(3)](LBOUND),
< [__ubound**(3)](UBOUND)
> [**co_lbound**(3)](CO_LBOUND),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/COUNT.md _pages/COUNT.md
< the elements of **mask** are false, then the result is **0__.
<     : The type shall be _logical_.
>   : The type shall be _logical_.
<     : (Optional) The type shall be _integer_.
>   : (Optional) The type shall be _integer_.
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind** is absent,
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CPU_TIME.md _pages/CPU_TIME.md
> ## cpu_time
< **cpu\_time**(3) - \[SYSTEM:TIME\] return CPU processor time in seconds
> **cpu_time**(3) - \[SYSTEM:TIME\] return CPU processor time in seconds
< not start with 0.0. For cpu\_time the absolute value is meaningless.
> not start with 0.0. For cpu_time the absolute value is meaningless.
<     : The type shall be _real_ with **intent(out)__. It is assigned a
>   : The type shall be _real_ with **intent(out)**. It is assigned a
< [__system\_clock**(3)](SYSTEM_CLOCK),
< [__date\_and\_time**(3)](DATE_AND_TIME)
> [**system_clock**(3)](SYSTEM_CLOCK),
> [**date_and_time**(3)](DATE_AND_TIME)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/CSHIFT.md _pages/CSHIFT.md
< of **array** along the dimension of **dim__. If **dim** is omitted it is taken to be
< **1__. **dim** is a scalar of type _integer_ in the range of **1 \<= dim \<= n**,
< where "n" is the rank of **array__. If the rank of **array** is one, then all
> **1**. **dim** is a scalar of type _integer_ in the range of **1 \<= dim \<= n**,
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/C_SIZEOF.md _pages/C_SIZEOF.md
> ## c_sizeof
< **c\_sizeof**(3) - \[ISO\_C\_BINDING\] Size in bytes of an expression
> **c_sizeof**(3) - \[ISO_C_BINDING\] Size in bytes of an expression
< **c\_sizeof(x)** calculates the number of bytes of storage the
> **c_sizeof(x)** calculates the number of bytes of storage the
< c\_size\_t (from the *iso\_c\_binding* module). Its value is the
> c*size_t (from the \_iso_c_binding* module). Its value is the
< [__storage\_size**(3)](STORAGE_SIZE)
> [**storage_size**(3)](STORAGE_SIZE)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/DATE_AND_TIME.md _pages/DATE_AND_TIME.md
> ## date_and_time
< **date\_and\_time**(3) - \[SYSTEM:TIME\] gets current time
> **date_and_time**(3) - \[SYSTEM:TIME\] gets current time
< **date\_and\_time(date, time, zone, values)** gets the corresponding
> **date_and_time(date, time, zone, values)** gets the corresponding
<     : An _integer_ array of eight elements that contains:
>   : An _integer_ array of eight elements that contains:
< [__cpu\_time**(3)](CPU_TIME),
< [__system\_clock**(3)](SYSTEM_CLOCK)
> [**cpu_time**(3)](CPU_TIME),
> [**system_clock**(3)](SYSTEM_CLOCK)
<  - [M_time](https://github.com/urbanjost/M_time) 
> - [M_time](https://github.com/urbanjost/M_time)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/DBLE.md _pages/DBLE.md
<     : The type shall be _integer_, _real_, or _complex_.
>   : The type shall be _integer_, _real_, or _complex_.
< [__float**(3)](FLOAT),
< [__real**(3)](REAL)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/DIGITS.md _pages/DIGITS.md
< model representation of **x__. For example, on a system using a 32-bit
<     : The type may be a scalar or array of type _integer_ or _real_.
>   : The type may be a scalar or array of type _integer_ or _real_.
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/DIM.md _pages/DIM.md
<     : The type shall be _integer_ or _real_
>   : The type shall be _integer_ or _real_
<     : The type shall be the same type and kind as **x__.
< The return value is the same type and kind as the input arguments **x** and **y__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/DOT_PRODUCT.md _pages/DOT_PRODUCT.md
> ## dot_product
< **dot\_product**(3) - \[TRANSFORMATIONAL\] Dot product function
> **dot_product**(3) - \[TRANSFORMATIONAL\] Dot product function
< **dot\_product(vector\_a, vector\_b)** computes the dot product
< multiplication of two vectors vector\_a and vector\_b. The two vectors
> **dot_product(vector_a, vector_b)** computes the dot product
> multiplication of two vectors vector*a and vector_b. The two vectors
< equal size. If the vectors are _integer_ or _real_, the result is
< **sum(vector\_a\*vector\_b)__. If the vectors are _complex_, the result is
< **sum(conjg(vector\_a)\*vector\_b)__. If the vectors are _logical_, the
< result is **any(vector\_a .and. vector\_b)__.
> equal size. If the vectors are \_integer* or _real_, the result is
> **sum(vector_a\*vector_b)**. If the vectors are _complex_, the result is
> **sum(conjg(vector_a)\*vector_b)**. If the vectors are _logical_, the
> result is **any(vector_a .and. vector_b)**.
<   - **vector\_a**
<     : The type shall be numeric or _logical_, rank 1.
> - **vector_a**
>   : The type shall be numeric or _logical_, rank 1.
<   - **vector\_b**
<     : The type shall be numeric if vector\_a is of numeric type or _logical_
<     if vector\_a is of type _logical_. vector\_b shall be a rank-one
> - **vector_b**
>   : The type shall be numeric if vector*a is of numeric type or \_logical*
>   if vector*a is of type \_logical*. vector_b shall be a rank-one
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/DPROD.md _pages/DPROD.md
< numbers **x** and **y__.
< the product of **x** and **y__. It is recommended that the processor compute the
<     : Must be of default _real(kind=kind(0.0))_ type
>   : Must be of default _real(kind=kind(0.0))_ type
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/DSHIFTL.md _pages/DSHIFTL.md
< **dshiftl(i, j, shift)** combines bits of **i** and **j__. The rightmost **shift**
< bits are the rightmost bits of **i__.
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
<     : Shall be of type _integer_, and of the same kind as **i__.
>   : Shall be of type _integer_, and of the same kind as **i**.
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
< The return value has same type and kind as **i__.
< [__dshiftr**(3)](DSHIFTR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/DSHIFTR.md _pages/DSHIFTR.md
< **dshiftr(i, j, shift)** combines bits of **i** and **j__. The leftmost **shift**
< bits are the leftmost bits of **j__.
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
<     : Shall be of type _integer_, and of the same kind as **i__.
>   : Shall be of type _integer_, and of the same kind as **i**.
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
< The return value has same type and kind as **i__.
< [__dshiftl**(3)](DSHIFTL)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/EOSHIFT.md _pages/EOSHIFT.md
< on elements of **array** along the dimension of **dim__. If **dim** is omitted it is
< taken to be **1__. **dim** is a scalar of type _integer_ in the range of **1 \<= DIM
< \<= n** where **"n"** is the rank of **array__. If the rank of **array** is one, then
> taken to be **1**. **dim** is a scalar of type _integer_ in the range of **1 \<= DIM
< present then the following are copied in depending on the type of **array__.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/EPSILON.md _pages/EPSILON.md
< such that **1+ little_number** is not equal to **1__; or more
> such that **1+ little_number** is not equal to **1**; or more
<     : The type shall be _real_.
>   : The type shall be _real_.
< [__digits**(3)](DIGITS),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ERFC.md _pages/ERFC.md
< **erfc**(x) computes the complementary error function of **x__.  Simpy put
< large **x** and the result is subtracted from **1__.
<     : The type shall be _real_.
>   : The type shall be _real_.
< The return value is of type _real_ and of the same kind as **x__. It lies in
> The return value is of type _real_ and of the same kind as **x**. It lies in
< [__erf**(3)](ERF)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ERFC_SCALED.md _pages/ERFC_SCALED.md
> ## erfc_scaled
< **erfc\_scaled**(3) - \[MATHEMATICS\] Error function
> **erfc_scaled**(3) - \[MATHEMATICS\] Error function
< **erfc\_scaled**(x) computes the exponentially-scaled complementary
< error function of **x__:
> **erfc_scaled**(x) computes the exponentially-scaled complementary
<     : The type shall be _real_.
>   : The type shall be _real_.
< The return value is of type _real_ and of the same kind as **x__.
> The return value is of type _real_ and of the same kind as **x**.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ERF.md _pages/ERF.md
<     : The type shall be _real_.
>   : The type shall be _real_.
< [__erfc**(3)](ERFC)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/EVENT_QUERY.md _pages/EVENT_QUERY.md
> ## event_query
< **event\_query**(3) - \[COLLECTIVE\] Query whether a coarray event has occurred
> **event_query**(3) - \[COLLECTIVE\] Query whether a coarray event has occurred
< **event\_query** assigns the number of events to **count** which have been
> **event_query** assigns the number of events to **count** which have been
< **event\_wait__. When **stat** is present and the invocation was successful, it
< is assigned the value **0__. If it is present and the invocation has failed,
< it is assigned a positive value and **count** is assigned the value **-1__.
> **event_wait**. When **stat** is present and the invocation was successful, it
<     : (intent(in)) Scalar of type event\_type, defined in
<     iso\_fortran\_env; shall not be coindexed.
<     _integer_.
>   : (intent(in)) Scalar of type event_type, defined in
>   iso_fortran_env; shall not be coindexed.
>   _integer_.
<     : (OPTIONAL) Scalar default-kind _integer_ variable.
>   : (OPTIONAL) Scalar default-kind _integer_ variable.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/EXECUTE_COMMAND_LINE.md _pages/EXECUTE_COMMAND_LINE.md
> ## execute_command_line
< **execute\_command\_line**(3) - \[SYSTEM:PROCESSES\] Execute a shell command
> **execute_command_line**(3) - \[SYSTEM:PROCESSES\] Execute a shell command
< command, as returned by **system__. **cmdstat** is set to zero if the command
< When the command is executed synchronously, **execute\_command\_line**
> When the command is executed synchronously, **execute_command_line**
< **execute\_command\_line** returns without waiting.
> **execute_command_line** returns without waiting.
<     : a default _character_ scalar containing the command line to be
<     : (Optional) a default _logical_ scalar. If **wait** is present with the
<     : (Optional) an _integer_ of the default kind with **intent(inout)__. If
<     : (Optional) an _integer_ of default kind with **intent(inout)__. If an
<     : (Optional) a _character_ scalar of the default kind. It is an **intent
>   : a default _character_ scalar containing the command line to be
>   : (Optional) a default _logical_ scalar. If **wait** is present with the
>   : (Optional) an _integer_ of the default kind with **intent(inout)**. If
>   : (Optional) an _integer_ of default kind with **intent(inout)**. If an
>   : (Optional) a _character_ scalar of the default kind. It is an **intent
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/EXP.md _pages/EXP.md
< of the _real_ component of **x** is **log(huge(x))__.
> of the _real_ component of **x** is **log(huge(x))**.
<     : The type shall be _real_ or _complex_.
>   : The type shall be _real_ or _complex_.
< The return value has the same type and kind as **x__.
< * [__log**(3)](LOG)
< * Wikipedia:[Exponential function](https://en.wikipedia.org/wiki/Exponential_function)
> - Wikipedia:[Exponential function](https://en.wikipedia.org/wiki/Exponential_function)
< * Wikipedia:[Euler's formula](https://en.wikipedia.org/wiki/Euler%27s_formula)
> - Wikipedia:[Euler's formula](https://en.wikipedia.org/wiki/Euler%27s_formula)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/EXPONENT.md _pages/EXPONENT.md
< **exponent**(3) - \[MODEL\_COMPONENTS\] Exponent function
> **exponent**(3) - \[MODEL_COMPONENTS\] Exponent function
< **exponent**(x) returns the value of the exponent part of **x__. If **x** is
<     : The type shall be _real_.
>   : The type shall be _real_.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/EXTENDS_TYPE_OF.md _pages/EXTENDS_TYPE_OF.md
> ## extends_type_of
< **extends\_type\_of**(3) - \[STATE\] determine if the dynamic type of **a** is an extension of the dynamic type of **mold__.
> **extends_type_of**(3) - \[STATE\] determine if the dynamic type of **a** is an extension of the dynamic type of **mold**.
< **extends\_type\_of**(3) is **.true.** if and only if the dynamic type of **a**
< is an extension of the dynamic type of **mold__.
> **extends_type_of**(3) is **.true.** if and only if the dynamic type of **a**
<     type of **a** is an extension type of the dynamic type of **mold__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/FINDLOC.md _pages/FINDLOC.md
< dimension **dim** having a value equal to **value__.
< true, that element of **array** matches **value__.
<     n is the rank of **array__. The corresponding actual argument shall
<     **array__.
< parameter is that specified by the value of **kind__; otherwise the kind
< **array__; otherwise, the result is of rank n - 1 and shape
< is the shape of **array__.
<     **array** whose value matches **value__. If there is such a value, the
<     extent of the ith dimension of **array__. If no elements match **value**
<     whose value matches **value__. If there is such a value, the ith
<     extent of the ith dimension of **array__. If no elements match
< bounds for **b__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/FLOOR.md _pages/FLOOR.md
<     where **KIND** is any valid value for type _integer_.
>     where __KIND__ is any valid value for type _integer_.
< **floor(a)** returns the greatest integer less than or equal to **a__.
< the scale **-huge(int(a,kind=KIND))-1** to **huge(int(a),kind=KIND)__.
<     : The type shall be _real_.
>   : The type shall be _real_.
<     : (Optional) A scalar _integer_ constant initialization expression
>   : (Optional) A scalar _integer_ constant initialization expression
< default-kind _integer_ otherwise. 
> default-kind _integer_ otherwise.
< [__ceiling**(3)](CEILING),
< [__nint**(3)](NINT)
< [__aint**(3)](AINT),
< [__anint**(3)](ANINT),
< [__int**(3)](INT),
< [__selected_int_kind**(3)](SELECTED_INT_KIND)
> [**selected_int_kind**(3)](SELECTED_INT_KIND)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/FRACTION.md _pages/FRACTION.md
< **fraction**(3) - \[MODEL\_COMPONENTS\] Fractional part of the model representation
> **fraction**(3) - \[MODEL_COMPONENTS\] Fractional part of the model representation
< of **x__.
<     : The type of the argument shall be a _real_.
>   : The type of the argument shall be a _real_.
< **x \* radix(x)\*\*(-exponent(x))__.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/GAMMA.md _pages/GAMMA.md
< **gamma(x)** computes Gamma of **x__. For positive whole number values of **n** the
< Gamma function can be used to calculate factorials, as  **(n-1)!  == gamma(real(n))__.
< $$ \\__Gamma**(x) = \\int\_0\*\*\\infty
< t\*\*{x-1}{\\mathrm{e}}\*\*{__-t__}\\,{\\mathrm{d}}t $$
> \\__Gamma__(x) = \\int\_0\*\*\\infty
> t\*\*{x-1}{\\mathrm{e}}\*\*{__-t__}\\,{\\mathrm{d}}t
<     : Shall be of type _real_ and neither zero nor a negative integer.
>   : Shall be of type _real_ and neither zero nor a negative integer.
< Logarithm of the Gamma function: [__log\_gamma**(3)](LOG_GAMMA)
> Logarithm of the Gamma function: [**log_gamma**(3)](LOG_GAMMA)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/GET_COMMAND_ARGUMENT.md _pages/GET_COMMAND_ARGUMENT.md
> ## get_command_argument
< **get\_command\_argument**(3) - \[SYSTEM:COMMAND LINE\] Get command line arguments
> **get_command_argument**(3) - \[SYSTEM:COMMAND LINE\] Get command line arguments
< Retrieve the **number__-th argument that was passed on the command line
<     : Shall be a scalar of type **integer**, **number \>= 0__. If **number =
<     :Shall be a scalar of type _character_ and of default kind. After
<     get\_command\_argument returns, the **value** argument holds the
<     **number__-th command line argument. If **value** can not hold the argument,
<     it is truncated to fit the length of **value__. If there are less than
<     :(Optional) Shall be a scalar of type _integer_. The **length**
<     argument contains the length of the **number__-th command line argument.
<     :(Optional) Shall be a scalar of type _integer_. If the argument
<     truncated command line argument, **status** is **-1__; and otherwise the
>   :Shall be a scalar of type _character_ and of default kind. After
>   get_command_argument returns, the **value** argument holds the
>   :(Optional) Shall be a scalar of type _integer_. The **length**
>   :(Optional) Shall be a scalar of type _integer_. If the argument
< [__get\_command**(3)](GET_COMMAND),
< [__command\_argument\_count**(3)](COMMAND_ARGUMENT_COUNT)
> [**get_command**(3)](GET_COMMAND),
> [**command_argument_count**(3)](COMMAND_ARGUMENT_COUNT)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/GET_COMMAND.md _pages/GET_COMMAND.md
> ## get_command
< **get\_command**(3) - \[SYSTEM:COMMAND LINE\] Get the entire command line
> **get_command**(3) - \[SYSTEM:COMMAND LINE\] Get the entire command line
<     : Shall be of type _character_ and of default kind. If
<     invoke the program in **command__.
<     : Shall be of type _integer_ and of default kind. If **length**
<     : Shall be of type _integer_ and of default kind. If **status**
>   : Shall be of type _character_ and of default kind. If
>   : Shall be of type _integer_ and of default kind. If **length**
>   : Shall be of type _integer_ and of default kind. If **status**
< [__get\_command\_argument**(3)](GET_COMMAND_ARGUMENT),
< [__command\_argument\_count**(3)](COMMAND_ARGUMENT_COUNT)
> [**get_command_argument**(3)](GET_COMMAND_ARGUMENT),
> [**command_argument_count**(3)](COMMAND_ARGUMENT_COUNT)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/GET_ENVIRONMENT_VARIABLE.md _pages/GET_ENVIRONMENT_VARIABLE.md
> ## get_environment
< **get\_environment\_variable**(3) - \[SYSTEM:ENVIRONMENT\] Get an environmental variable
> **get_environment_variable**(3) - \[SYSTEM:ENVIRONMENT\] Get an environmental variable
< Get the **value** of the environmental variable **name__.
< Note that **get\_environment\_variable**(3) need not be thread-safe. It
> Note that **get_environment_variable**(3) need not be thread-safe. It
<     Shall be a scalar of type _character_ and of default kind.
>   Shall be a scalar of type _character_ and of default kind.
<     Shall be a scalar of type _character_ and of default kind.
<     The value of **name** is stored in **value__. If **value** is not large enough
<     Shall be a scalar of type _integer_ and of default kind.
<     Shall be a scalar of type _integer_ and of default kind.
<   - **trim\_name**
<     : If **trim\_name** is present with the value **.false.**, the trailing blanks in
>   Shall be a scalar of type _character_ and of default kind.
>   Shall be a scalar of type _integer_ and of default kind.
>   Shall be a scalar of type _integer_ and of default kind.
> - **trim_name**
>   : If **trim_name** is present with the value **.false.**, the trailing blanks in
<     Shall be a scalar of type _logical_ and of default kind.
>   Shall be a scalar of type _logical_ and of default kind.
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: GNU_Free_Documentation_License.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/HUGE.md _pages/HUGE.md
<    where **TYPE** may be _real_ or _integer_ and **KIND** is any supported
<    associated _kind_.
> where **TYPE** may be _real_ or _integer_ and **KIND** is any supported
> associated _kind_.
< kind and type of **x__.
<     : Shall be an arbitrary value of type _real_ or _integer_.
<     The value is used merely to determine what _kind_ and _type_ of
>   : Shall be an arbitrary value of type _real_ or _integer_.
>   The value is used merely to determine what _kind_ and _type_ of
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/HYPOT.md _pages/HYPOT.md
<    where **x,y,value** shall all be of the same **kind__.
<     : The type shall be _real_.
>   : The type shall be _real_.
<     : The type and kind type parameter shall be the same as **x__.
< The return value has the same type and kind type parameter as **x__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IACHAR.md _pages/IACHAR.md
< The return value is of type _integer_ and of kind **KIND__. If **KIND** is absent,
< character position of **c__.
<     :  An _integer_ initialization expression indicating the kind
>   : Shall be a scalar _character_, with _intent(in)_
>   : (Optional) An _integer_ initialization expression indicating the kind
<    The _integer_ code for the first character in **c__. It represents
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
< See [__ichar**(3)](ICHAR) for a discussion of converting between numerical
< [__achar**(3)](ACHAR),
< [__char**(3)](CHAR),
< [__ichar**(3)](ICHAR)
<     [__adjustl**(3)](ADJUSTL), [__adjustr**(3)](ADJUSTR), [__index**(3)](INDEX), 
<     [__scan**(3)](SCAN), [__verify**(3)](VERIFY)
<     [__len\_trim**(3)](LEN_TRIM),
<     [__len**(3)](LEN),
<     [__repeat**(3)](REPEAT), [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IALL.md _pages/IALL.md
< the corresponding element in **mask** is **.true.__.
<     : Shall be an array of type _integer_
>   : Shall be an array of type _integer_
<     : (Optional) shall be a scalar of type _integer_ with a value in the
<     range from **1 to n**, where **n** equals the rank of **array__.
<     : (Optional) shall be of type _logical_ and either be a scalar or an
<     array of the same shape as **array__.
>   : (Optional) shall be a scalar of type _integer_ with a value in the
>   : (Optional) shall be of type _logical_ and either be a scalar or an
< The result is of the same type as **array__.
< [__iany**(3)](IANY),
< [__iparity**(3)](IPARITY),
< [__iand**(3)](IAND)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IAND.md _pages/IAND.md
< Bitwise logical **and__.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_, of the same kind as **i__.
>   : The type shall be _integer_, of the same kind as **i**.
< [__ieor**(3)](IEOR), 
< [__ibclr**(3)](IBCLR),
< [__not**(3)](NOT),
< [__btest**(3)](BTEST),
< [__ibclr**(3)](IBCLR),
< [__ibits**(3)](IBITS),
< [__ibset**(3)](IBSET),
< [__ior**(3)](IOR),
< [__ieor**(3)](IEOR),
< [__mvbits**(3)](MVBITS)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IANY.md _pages/IANY.md
< dimension **dim** if the corresponding element in **mask** is **.true.__.
<     : Shall be an array of type _integer_
>   : Shall be an array of type _integer_
<     : (Optional) shall be a scalar of type _integer_ with a value in the
<     range from **1 to n**, where **n** equals the rank of **array__.
<     : (Optional) shall be of type _logical_ and either be a scalar or an
<     array of the same shape as **array__.
>   : (Optional) shall be a scalar of type _integer_ with a value in the
>   : (Optional) shall be of type _logical_ and either be a scalar or an
< The result is of the same type as **array__.
< [__iparity**(3)](IPARITY),
< [__iall**(3)](IALL),
< [__ior**(3)](IOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IBCLR.md _pages/IBCLR.md
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_. A value of zero refers to the least
<     _integer_. The value of **pos** must be within the range zero to
<     **(bit\_size(i)-1__).
>   : The type shall be _integer_. A value of zero refers to the least
>   _integer_. The value of **pos** must be within the range zero to
>   **(bit_size(i)-1**).
< The return value is of type _integer_ and of the same kind as **i__.
> The return value is of type _integer_ and of the same kind as **i**.
< [__ieor**(3)](IEOR), 
< [__not**(3)](NOT),
< [__btest**(3)](BTEST),
< [__ibclr**(3)](IBCLR),
< [__ibits**(3)](IBITS),
< [__ibset**(3)](IBSET),
< [__iand**(3)](IAND),
< [__ior**(3)](IOR),
< [__ieor**(3)](IEOR),
< [__mvbits**(3)](MVBITS)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IBITS.md _pages/IBITS.md
< must be less than or equal to the value **bit\_size(i)__.
> must be less than or equal to the value **bit_size(i)**.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_. A value of zero refers to the least
>   : The type shall be _integer_. A value of zero refers to the least
<     : The type shall be _integer_.
>   : The type shall be _integer_.
< The return value is of type _integer_ and of the same kind as **i__.
> The return value is of type _integer_ and of the same kind as **i**.
< [__ieor**(3)](IEOR), 
< [__ibclr**(3)](IBCLR),
< [__not**(3)](NOT),
< [__btest**(3)](BTEST),
< [__ibclr**(3)](IBCLR),
< [__ibset**(3)](IBSET),
< [__iand**(3)](IAND),
< [__ior**(3)](IOR),
< [__ieor**(3)](IEOR),
< [__mvbits**(3)](MVBITS)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IBSET.md _pages/IBSET.md
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_. A value of zero refers to the least
<     _integer_. The value of pos must be within the range zero to
<     **(bit\_size(i)-1__).
>   : The type shall be _integer_. A value of zero refers to the least
>   _integer_. The value of pos must be within the range zero to
>   **(bit_size(i)-1**).
< The return value is of type _integer_ and of the same kind as **i__.
> The return value is of type _integer_ and of the same kind as **i**.
< [__ieor**(3)](IEOR), 
< [__ibclr**(3)](IBCLR),
< [__not**(3)](NOT),
< [__btest**(3)](BTEST),
< [__ibclr**(3)](IBCLR),
< [__ibits**(3)](IBITS),
< [__iand**(3)](IAND),
< [__ior**(3)](IOR),
< [__ieor**(3)](IEOR),
< [__mvbits**(3)](MVBITS)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ICHAR.md _pages/ICHAR.md
<     : Shall be a scalar _character_, with **intent(in)**
>   : Shall be a scalar _character_, with **intent(in)**
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind** is absent,
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
< [__achar**(3)](ACHAR),
< [__char**(3)](CHAR),
< [__iachar**(3)](IACHAR)
<  [__adjustl**(3)](ADJUSTL),
<  [__adjustr**(3)](ADJUSTR),
<  [__index**(3)](INDEX),
<  [__scan**(3)](SCAN),
<  [__verify**(3)](VERIFY)
<  [__len\_trim**(3)](LEN_TRIM),
<  [__len**(3)](LEN),
<  [__repeat**(3)](REPEAT),
<  [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IEOR.md _pages/IEOR.md
< **ieor** returns the bitwise Boolean exclusive-__or** of **i** and **j__.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_, of the same kind as **i__.
>   : The type shall be _integer_, of the same kind as **i**.
< [__ieor**(3)](IEOR), 
< [__ibclr**(3)](IBCLR),
< [__not**(3)](NOT),
< [__btest**(3)](BTEST),
< [__ibclr**(3)](IBCLR),
< [__ibits**(3)](IBITS),
< [__ibset**(3)](IBSET),
< [__iand**(3)](IAND),
< [__ior**(3)](IOR),
< [__mvbits**(3)](MVBITS)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IMAGE_INDEX.md _pages/IMAGE_INDEX.md
> ## image_index
< **image\_index**(3) - \[COLLECTIVE\] Cosubscript to image index conversion
> **image_index**(3) - \[COLLECTIVE\] Cosubscript to image index conversion
<     **coarray__.
< [__this\_image**(3)](THIS_IMAGE),
< [__num\_images**(3)](NUM_IMAGES)
> [**this_image**(3)](THIS_IMAGE),
> [**num_images**(3)](NUM_IMAGES)
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/INDEX.md _pages/INDEX.md
<     : An _integer_ initialization expression indicating the kind parameter
>   : An _integer_ initialization expression indicating the kind parameter
<     : The return value is of type _integer_ and of kind **kind__. If **kind** is
>   : The return value is of type _integer_ and of kind **kind**. If **kind** is
<     [__adjustl**(3)](ADJUSTL), [__adjustr**(3)](ADJUSTR), [__index**(3)](INDEX),
<     [__scan**(3)](SCAN), [__verify**(3)](VERIFY)
<     [__len\_trim**(3)](LEN_TRIM),
<     [__len**(3)](LEN),
<     [__repeat**(3)](REPEAT), [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/INT.md _pages/INT.md
<     : Shall be of type _integer_, _real_, or _complex_ or a BOZ-literal-constant.
>   : Shall be of type _integer_, _real_, or _complex_ or a BOZ-literal-constant.
<     : An _integer_ initialization expression indicating the kind
>   : An _integer_ initialization expression indicating the kind
<  **Case__:
<  1.  If **a** is of type _integer_, **int**(a) = a
> 1.  If **a** is of type _integer_, **int**(a) = a
<  2.  If **a** is of type _real_ and **|a| \< 1, int(a)** equals **0__. If **|a| \>=
<      **a** and whose sign is the same as the sign of **a__.
> 2.  If **a** is of type _real_ and **|a| \< 1, int(a)** equals **0**. If **|a| \>=
<  3.  If **a** is of type _complex_, rule 2 is applied to the _real_ part of **a__.
> 3.  If **a** is of type _complex_, rule 2 is applied to the _real_ part of **a**.
<  4.  If _a_ is a boz-literal constant, it is treated as an _integer_
<      with the _kind_ specified.
> 4.  If _a_ is a boz-literal constant, it is treated as an _integer_
>     with the _kind_ specified.
< [__aint**(3)](AINT),
< [__anint**(3)](ANINT),
< [__nint**(3)](NINT),
< [__selected_int_kind**(3)](SELECTED_INT_KIND),
< [__ceiling**(3)](CEILING),
< [__floor**(3)](FLOOR)
> [**selected_int_kind**(3)](SELECTED_INT_KIND),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IOR.md _pages/IOR.md
< **ior** returns the bit-wise Boolean inclusive-__or** of **i** and **j__.
<     : an _integer_ scalar or array.
>   : an _integer_ scalar or array.
<     : _integer_ scalar or array, of the same kind as **i__.
>   : _integer_ scalar or array, of the same kind as **i**.
< [__ieor**(3)](IEOR), 
< [__ibclr**(3)](IBCLR),
< [__not**(3)](NOT),
< [__btest**(3)](BTEST),
< [__ibclr**(3)](IBCLR),
< [__ibits**(3)](IBITS),
< [__ibset**(3)](IBSET),
< [__iand**(3)](IAND),
< [__ieor**(3)](IEOR),
< [__mvbits**(3)](MVBITS)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IPARITY.md _pages/IPARITY.md
< dimension **dim** if the corresponding element in **mask** is **.true.__.
<     : Shall be an array of type _integer_
>   : Shall be an array of type _integer_
<     : (Optional) shall be a scalar of type _integer_ with a value in the
<     range from **"1" to "n"**, where **"n"** equals the rank of **array__.
<     : (Optional) shall be of type _logical_ and either be a scalar or an
<     array of the same shape as **array__.
>   : (Optional) shall be a scalar of type _integer_ with a value in the
>   : (Optional) shall be of type _logical_ and either be a scalar or an
< The result is of the same type as **array__.
< [__iany**(3)](IANY),
< [__iall**(3)](IALL),
< [__ieor**(3)](IEOR),
< [__parity**(3)](PARITY)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IS_CONTIGUOUS.md _pages/IS_CONTIGUOUS.md
> ## is_contiguous
< **is\_contiguous**(3) - \[ARRAY INQUIRY\] test if object is contiguous
> **is_contiguous**(3) - \[ARRAY INQUIRY\] test if object is contiguous
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ISHFTC.md _pages/ISHFTC.md
< value of **shift** must be less than **size__. If the **size** argument is omitted,
< it is taken to be equivalent to **bit\_size(i)__.
> it is taken to be equivalent to **bit_size(i)**.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : (Optional) The type shall be _integer_; the value must be greater than
<     zero and less than or equal to **bit\_size**(i).
>   : (Optional) The type shall be _integer_; the value must be greater than
>   zero and less than or equal to **bit_size**(i).
< The return value is of type _integer_ and of the same kind as **i__.
> The return value is of type _integer_ and of the same kind as **i**.
< [__ishft**(3)](ISHFT)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/ISHFT.md _pages/ISHFT.md
< greater than **bit\_size(i)**, the value is undefined. Bits shifted out
> greater than **bit_size(i)**, the value is undefined. Bits shifted out
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
< The return value is of type _integer_ and of the same kind as **i__.
> The return value is of type _integer_ and of the same kind as **i**.
< [__ishftc**(3)](ISHFTC)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IS_IOSTAT_END.md _pages/IS_IOSTAT_END.md
> ## is_iostat_end
< **is\_iostat\_end**(3) - \[STATE\] Test for end-of-file value
> **is_iostat_end**(3) - \[STATE\] Test for end-of-file value
< is\_iostat\_end(3) tests whether a variable (assumed returned as a status
> is_iostat_end(3) tests whether a variable (assumed returned as a status
< **iostat\_end** parameter of the intrinsic module **iso\_fortran\_env__.
> **iostat_end** parameter of the intrinsic module **iso_fortran_env**.
<     : An _integer_ status value to test if indicating end of file.
>   : An _integer_ status value to test if indicating end of file.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/IS_IOSTAT_EOR.md _pages/IS_IOSTAT_EOR.md
> ## is_iostat_eor
< **is\_iostat\_eor**(3) - \[STATE\] Test for end-of-record value
> **is_iostat_eor**(3) - \[STATE\] Test for end-of-record value
< is\_iostat\_eor tests whether an variable has the value of the I/O
> is_iostat_eor tests whether an variable has the value of the I/O
< variable with the iostat\_eor parameter of the intrinsic module
< **iso\_fortran\_env__.
> variable with the iostat_eor parameter of the intrinsic module
> **iso_fortran_env**.
<     : Shall be of the type _integer_.
>   : Shall be of the type _integer_.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/KIND.md _pages/KIND.md
< **kind(x)** returns the kind value of the entity **x__.
<     : Shall be of type _logical_, _integer_, _real_, _complex_ or _character_.
>   : Shall be of type _logical_, _integer_, _real_, _complex_ or _character_.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LBOUND.md _pages/LBOUND.md
<     : Shall be a scalar _integer_.
>   : Shall be a scalar _integer_.
<     : An _integer_ initialization expression indicating the kind
>   : An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind** is absent,
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
< result is an array of the lower bounds of **array__. If **dim** is present, the
< [__ubound**(3)](UBOUND),
< [__co\_lbound**(3)](CO_LBOUND)
> [**co_lbound**(3)](CO_LBOUND)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LEADZ.md _pages/LEADZ.md
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
< the bits of **i** are zero, the result value is **bit\_size(i)__.
> the bits of **i** are zero, the result value is **bit_size(i)**.
< [__bit\_size**(3)](BIT_SIZE),
< [__popcnt**(3)](POPCNT),
< [__poppar**(3)](POPPAR),
< [__trailz**(3)](TRAILZ)
> [**bit_size**(3)](BIT_SIZE),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LEN.md _pages/LEN.md
<     : Shall be a scalar or array of type _character_.
>   : Shall be a scalar or array of type _character_.
<     : An _integer_ initialization expression indicating the kind
>   : An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind** is absent,
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
<     [__adjustl**(3)](ADJUSTL),
<     [__adjustr**(3)](ADJUSTR),
<     [__index**(3)](INDEX),
<     [__scan**(3)](SCAN),
<     [__verify**(3)](VERIFY)
<     [__len\_trim**(3)](LEN_TRIM),
<     [__len**(3)](LEN),
<     [__repeat**(3)](REPEAT),
<     [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LEN_TRIM.md _pages/LEN_TRIM.md
> ## len_trim
< **len\_trim**(3) - \[CHARACTER:WHITESPACE\] Length of a character entity without trailing blank characters
> **len_trim**(3) - \[CHARACTER:WHITESPACE\] Length of a character entity without trailing blank characters
<     Shall be a scalar of type _character_
<     : (Optional) An _integer_ initialization expression indicating the kind
>   Shall be a scalar of type _character_
>   : (Optional) An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind** is absent,
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
<     [__adjustl**(3)](ADJUSTL),
<     [__adjustr**(3)](ADJUSTR),
<     [__index**(3)](INDEX),
<     [__scan**(3)](SCAN),
<     [__verify**(3)](VERIFY)
<     [__repeat**(3)](REPEAT),
<     [__len**(3)](LEN),
<     [__trim**(3)](TRIM)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LGE.md _pages/LGE.md
<   - **string\_a**
<     : Shall be of default _character_ type.
> - **string_a**
>   : Shall be of default _character_ type.
<   - **string\_b**
<     : Shall be of default _character_ type.
> - **string_b**
>   : Shall be of default _character_ type.
< Returns .true. if string\_a \>= string\_b, and .false. otherwise, based
> Returns .true. if string_a \>= string_b, and .false. otherwise, based
<  [__adjustl**(3)](ADJUSTL),
<  [__adjustr**(3)](ADJUSTR),
<  [__index**(3)](INDEX),
<  [__scan**(3)](SCAN),
<  [__verify**(3)](VERIFY)
<  [__len\_trim**(3)](LEN_TRIM),
<  [__len**(3)](LEN),
<  [__repeat**(3)](REPEAT),
<  [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LGT.md _pages/LGT.md
<   - **string\_a**
<     : Shall be of default _character_ type.
> - **string_a**
>   : Shall be of default _character_ type.
<   - **string\_b**
<     : Shall be of default _character_ type.
> - **string_b**
>   : Shall be of default _character_ type.
< Returns .true. if string\_a \> string\_b, and .false. otherwise, based
> Returns .true. if string_a \> string_b, and .false. otherwise, based
< [__lge**(3)](LGE),
< [__lle**(3)](LLE),
< [__llt**(3)](LLT)
< [__adjustl**(3)](ADJUSTL),
< [__adjustr**(3)](ADJUSTR),
< [__index**(3)](INDEX),
< [__scan**(3)](SCAN),
< [__verify**(3)](VERIFY)
< [__len\_trim**(3)](LEN_TRIM),
< [__len**(3)](LEN),
< [__repeat**(3)](REPEAT),
< [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LLE.md _pages/LLE.md
< character codes. if the **string\_a** and **string\_b** are not the same length,
> character codes. if the **string_a** and **string_b** are not the same length,
<   - **str\_a**
<     : variable or array of default _character_ type.
> - **str_a**
>   : variable or array of default _character_ type.
<   - **str\_b**
<     : variable or array of default _character_ type.
> - **str_b**
>   : variable or array of default _character_ type.
<     if **str_a** and **str_b** are both arrays they must be of the
>   if **str_a** and **str_b** are both arrays they must be of the
<     Returns **.true.** if **STR\_A \<= STR\_B**, and **.false.** otherwise, based on
>   Returns **.true.** if **STR_A \<= STR_B**, and **.false.** otherwise, based on
< [__lge**(3)](LGE),
< [__lgt**(3),](LGT),
< [__llt**(3)](LLT)
<  [__adjustl**(3)](ADJUSTL),
<  [__adjustr**(3)](ADJUSTR),
<  [__index**(3)](INDEX),
<  [__scan**(3)](SCAN),
<  [__verify**(3)](VERIFY)
<  [__len\_trim**(3)](LEN_TRIM),
<  [__len**(3)](LEN),
<  [__repeat**(3)](REPEAT),
<  [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LLT.md _pages/LLT.md
< codes. If the **string\_a** and **string\_b** are not the same length, the shorter
> codes. If the **string_a** and **string_b** are not the same length, the shorter
<   - **string\_a**
<     : Shall be of default _character_ type.
> - **string_a**
>   : Shall be of default _character_ type.
<   - **string\_b**
<     : Shall be of default _character_ type.
> - **string_b**
>   : Shall be of default _character_ type.
< Returns .true. if string\_a \<= string\_b, and .false. otherwise, based
> Returns .true. if string_a \<= string_b, and .false. otherwise, based
< [__lge**(3)](LGE),
< [__lgt**(3)](LGT),
< [__lle**(3](LLE))
<     [__adjustl**(3)](ADJUSTL), [__adjustr**(3)](ADJUSTR), [__index**(3)](INDEX),
<     [__scan**(3)](SCAN), [__verify**(3)](VERIFY)
<     [__len\_trim**(3)](LEN_TRIM),
<     [__len**(3)](LEN),
<     [__repeat**(3)](REPEAT), [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LOG10.md _pages/LOG10.md
< **log10(x)** computes the base 10 logarithm of **x__. This
<     : A _real_ value > 0 to take the log of.
>   : A _real_ value > 0 to take the log of.
< the same as **x__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LOG_GAMMA.md _pages/LOG_GAMMA.md
> ## log_gamma
< **log\_gamma**(3) - \[MATHEMATICS\] Logarithm of the Gamma function
> **log_gamma**(3) - \[MATHEMATICS\] Logarithm of the Gamma function
< **log\_gamma(x)** computes the natural logarithm of the absolute value of the Gamma function.
> **log_gamma(x)** computes the natural logarithm of the absolute value of the Gamma function.
<     : Shall be of type _real_ and neither zero nor a negative integer.
>   : Shall be of type _real_ and neither zero nor a negative integer.
< The return value is of type _real_ of the same kind as **x__.
> The return value is of type _real_ of the same kind as **x**.
< Gamma function: [__gamma**(3)](GAMMA)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LOGICAL.md _pages/LOGICAL.md
>   : The type shall be _logical_.
<     : The type shall be _logical_.
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
<    do i =1, size(logical_kinds) 
>    do i =1, size(logical_kinds)
< [__int**(3)](INT),
< [__real**(3)](REAL),
< [__cmplx**(3)](CMPLX)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/LOG.md _pages/LOG.md
<     : The type shall be _real_ or _complex_.
>   : The type shall be _real_ or _complex_.
< the same as **x__. If **x** is _complex_, the imaginary part OMEGA is in the range
> the same as **x**. If **x** is _complex_, the imaginary part OMEGA is in the range
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MASKL.md _pages/MASKL.md
< remaining bits set to **0__.
> **maskl(i\[, _kind_\])** has its leftmost **i** bits set to **1**, and the
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
<     : Shall be a scalar constant expression of type _integer_.
>   : Shall be a scalar constant expression of type _integer_.
< [__maskr**(3)](MASKR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MASKR.md _pages/MASKR.md
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
<     : Shall be a scalar constant expression of type _integer_.
>   : Shall be a scalar constant expression of type _integer_.
< [__maskl**(3)](MASKL)
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: MATH_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MATMUL.md _pages/MATMUL.md
<   - **matrix\_a**
<     : An array of _integer_, _real_, _complex_, or _logical_ type, with a rank of
<   - **matrix\_b**
<     : An array of _integer_, _real_, or _complex_ type if **matrix\_a** is of a
<     numeric type; otherwise, an array of _logical_ type. The rank shall be
<     one or two, and the first (or only) dimension of **matrix\_b** shall be
<     equal to the last (or only) dimension of **matrix\_a__.
> - **matrix_a**
>   : An array of _integer_, _real_, _complex_, or _logical_ type, with a rank of
> - **matrix_b**
>   : An array of _integer_, _real_, or _complex_ type if **matrix_a** is of a
>   numeric type; otherwise, an array of _logical_ type. The rank shall be
>   one or two, and the first (or only) dimension of **matrix_b** shall be
>   equal to the last (or only) dimension of **matrix_a**.
< The matrix product of **matrix\_a** and **matrix\_b__. The type and kind of the
> The matrix product of **matrix_a** and **matrix_b**. The type and kind of the
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MAXEXPONENT.md _pages/MAXEXPONENT.md
< of **x__.
<     : Shall be of type _real_.
>   : Shall be of type _real_.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MAXLOC.md _pages/MAXLOC.md
<     : Shall be an array of type _integer_, _real_, or _character_.
>   : Shall be an array of type _integer_, _real_, or _character_.
<     : (Optional) Shall be a scalar of type _integer_, with a value between
>   : (Optional) Shall be a scalar of type _integer_, with a value between
<     : Shall be an array of type _logical_, and conformable with **array__.
>   : Shall be an array of type _logical_, and conformable with **array**.
< the rank of **array__. If **dim** is present, the result is an array with a rank
< [__max**(3)](MAX),
< [__maxval**(3)](MAXVAL)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MAX.md _pages/MAX.md
<     : The type shall be _integer_ or _real_.
>   : The type shall be _integer_ or _real_.
<     : An expression of the same type and kind as **a1__.
< **max(arr1(N),arr2(N))__.
< [__maxloc**(3)](MAXLOC),
< [__maxval**(3)](MAXVAL),
< [__min**(3)](MIN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MAXVAL.md _pages/MAXVAL.md
<     : Shall be an array of type _integer_, _real_, or _character_.
>   : Shall be an array of type _integer_, _real_, or _character_.
<     : (Optional) Shall be a scalar of type _integer_, with a value between
<     : (Optional) Shall be an array of type _logical_, and conformable with
<     **array__.
>   : (Optional) Shall be a scalar of type _integer_, with a value between
>   : (Optional) Shall be an array of type _logical_, and conformable with
< kind as **array__.
< [__max**(3)](MAX),
< [__maxloc**(3)](MAXLOC)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MERGE_BITS.md _pages/MERGE_BITS.md
> ## merge_bits
< **merge\_bits**(3) - \[BIT:COPY\] Merge bits using a mask
> **merge_bits**(3) - \[BIT:COPY\] Merge bits using a mask
< **merge\_bits** performs a masked bit-blend of **i** and **j** using
> **merge_bits** performs a masked bit-blend of **i** and **j** using
< **i** if the k-th bit of **mask** is **1__; it is equal to the k-th bit
>     __ior (iand (i, mask),iand (j, not (mask)))__
<   : value to select bits from when the associated bit in the mask is **1__.
<   : value to select bits from when the associated bit in the mask is **0__.
< The bits blended from **i** and **j** using the mask **mask__. It is the
< as **j__.
<    & merge_bits(if_one,if_zero,msk) 
>    & merge_bits(if_one,if_zero,msk)
<    & merge_bits(if_one,if_zero,msk) 
>    & merge_bits(if_one,if_zero,msk)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MERGE.md _pages/MERGE.md
<     : Shall be of the same type and type parameters as **tsource__.
<     : Shall be of type _logical_.
>   : Shall be of type _logical_.
< The result is of the same type and type parameters as **tsource__. For any
< is 1.0 for K=5 and 0.0 for K=__-2__.
< [__pack**(3)](PACK),
< [__unpack**(3)](UNPACK),
< [__pack**(3)](PACK),
< [__spread**(3)](SPREAD),
< [__unpack**(3)](UNPACK)   
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MINEXPONENT.md _pages/MINEXPONENT.md
< of **x__.
<     : Shall be of type _real_.
>   : Shall be of type _real_.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MINLOC.md _pages/MINLOC.md
<     : Shall be an array of type _integer_, _real_, or _character_.
>   : Shall be an array of type _integer_, _real_, or _character_.
<     : (Optional) Shall be a scalar of type _integer_, with a value between
>   : (Optional) Shall be a scalar of type _integer_, with a value between
<     : Shall be an array of type _logical_, and conformable with **array__.
>   : Shall be an array of type _logical_, and conformable with **array**.
< the rank of **array__. If **dim** is present, the result is an array with a rank
< [__min**(3)](MIN),
< [__minval**(3)](MINVAL)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MIN.md _pages/MIN.md
<     : The type shall be _integer_ or _real_.
>   : The type shall be _integer_ or _real_.
<     : An expression of the same type and kind as **A1__.
< [__max**(3)](MAX),
< [__minloc**(3)](MINLOC),
< [__minval**(3)](MINVAL)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MINVAL.md _pages/MINVAL.md
<     : Shall be an array of type _integer_, _real_, or _character_.
>   : Shall be an array of type _integer_, _real_, or _character_.
<     : (Optional) Shall be a scalar of type _integer_, with a value between
>   : (Optional) Shall be a scalar of type _integer_, with a value between
<     : Shall be an array of type _logical_, and conformable with **array__.
>   : Shall be an array of type _logical_, and conformable with **array**.
< kind as **array__.
< [__min**(3)](MIN),
< [__minloc**(3)](MINLOC)
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: MODEL_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MOD.md _pages/MOD.md
< **mod**(a,p) computes the remainder of the division of **a** by **p__.
<     : Shall be a scalar of type _integer_ or _real_.
>   : Shall be a scalar of type _integer_ or _real_.
< The return value is the result of **a - (int(a/p) \* p)__. The type and kind
< **p__.
< [__modulo**(3)](MODULO)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MODULO.md _pages/MODULO.md
< **modulo(a,p)** computes the **a** modulo **p__.
<     : Shall be a scalar of type _integer_ or _real_.
>   : Shall be a scalar of type _integer_ or _real_.
<     : Shall be a scalar of the same type and kind as **a__. It shall not be
<   - If **a** and **p** are of type _integer_: **modulo(a,p)** has the value of 
<     **a - floor (real(a) / real(p)) \* p__.
> - If **a** and **p** are of type _integer_: **modulo(a,p)** has the value of
<   - If **a** and **p** are of type _real_: **modulo(a,p)** has the value of 
<     **a - floor (a / p) \* p__.
> - If **a** and **p** are of type _real_: **modulo(a,p)** has the value of
< magnitude of **p__.
< [__mod**(3)](MOD)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MOVE_ALLOC.md _pages/MOVE_ALLOC.md
> ## move_alloc
< **move\_alloc**(3) - \[\] Move allocation from one object to another
> **move_alloc**(3) - \[\] Move allocation from one object to another
< **move\_alloc(src, dest)** moves the allocation from SRC to DEST. SRC
> **move_alloc(src, dest)** moves the allocation from SRC to DEST. SRC
< [__allocated**(3)](ALLOCATED)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/MVBITS.md _pages/MVBITS.md
< (which is of the same kind as **from__).  It otherwise leaves the bits
< The bit positions copied must exist within the value of **from__.
< nonnegative and less than **bit\_size**(from).
> nonnegative and less than **bit_size**(from).
<     : An _integer_ to read bits from.
<     nonnegative _integer_ value < **bit_size(from)__.
<     : A nonnegative _integer_ value that indicates how many bits to
<     copy from **from__. It must not specify copying bits past the end
<     of **from__. That is, **frompos + len** must be less than or equal
<     to **bit_size(from)__.
<     : The _integer_ variable to place the copied bits into. It must
<     as **from__.
<     **to__. No other bits of **to** are altered. On return, the **len**
<     : A nonnegative _integer_ value indicating the starting location in
<     **to** to place the specified copy of bits from **from__. 
<     **topos + len** must be less than or equal to **bit_size(to)__.
>   : An _integer_ to read bits from.
>   nonnegative _integer_ value < **bit_size(from)**.
>   : A nonnegative _integer_ value that indicates how many bits to
>   to **bit_size(from)**.
>   : The _integer_ variable to place the copied bits into. It must
>   : A nonnegative _integer_ value indicating the starting location in
>   **topos + len** must be less than or equal to **bit_size(to)**.
< [__ieor**(3)](IEOR), 
< [__ibclr**(3)](IBCLR),
< [__not**(3)](NOT),
< [__btest**(3)](BTEST),
< [__ibclr**(3)](IBCLR),
< [__ibits**(3)](IBITS),
< [__ibset**(3)](IBSET),
< [__iand**(3)](IAND),
< [__ior**(3)](IOR),
< [__ieor**(3)](IEOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/NEAREST.md _pages/NEAREST.md
< **nearest**(3) - \[MODEL\_COMPONENTS\] Nearest representable number
> **nearest**(3) - \[MODEL_COMPONENTS\] Nearest representable number
< **x** in the direction indicated by the sign of **s__.
<     : Shall be of type _real_.
>   : Shall be of type _real_.
<     : Shall be of type _real_ and not equal to zero.
>   : Shall be of type _real_ and not equal to zero.
< The return value is of the same type as **x__. If **s** is positive, **nearest**
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/NEW_LINE.md _pages/NEW_LINE.md
> ## new_line
< **new\_line**(3) - \[CHARACTER\] new-line character
> **new_line**(3) - \[CHARACTER\] new-line character
< **new\_line(c)** returns the new-line character.
> **new_line(c)** returns the new-line character.
<    : If **a** is default _character_ and the character in position **10** of the
<    then the result is **achar(10)__.
<    result is **char(10, kind (a))__.
> : If **a** is default _character_ and the character in position **10** of the
<     : The argument shall be a scalar or array of the type _character_.
>   : The argument shall be a scalar or array of the type _character_.
< the same kind as parameter **c__.
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/NINT.md _pages/NINT.md
< If **x** is greater than zero, **nint(x)** has the value **int(x+0.5)__.
< **int(a-0.5)__.
<     : The type of the argument shall be _real_.
>   : The type of the argument shall be _real_.
<     : (Optional) A constant _integer_ expression indicating the kind
<     of default _integer_ type.
>   : (Optional) A constant _integer_ expression indicating the kind
>   of default _integer_ type.
<     equally near **x**, the result is whichever such _integer_ has the greater
>   equally near **x**, the result is whichever such _integer_ has the greater
< [__aint**(3)](AINT),
< [__anint**(3)](ANINT),
< [__int**(3)](INT),
< [__selected_int_kind**(3)](SELECTED_INT_KIND),
< [__ceiling**(3)](CEILING),
< [__floor**(3)](FLOOR)
> [**selected_int_kind**(3)](SELECTED_INT_KIND),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/NORM2.md _pages/NORM2.md
< Calculates the Euclidean vector norm (L\_2 norm) of **array** along
< dimension **dim__.
> Calculates the Euclidean vector norm (L_2 norm) of **array** along
<     : Shall be an array of type _real_.
>   : Shall be an array of type _real_.
<     : shall be a scalar of type _integer_ with a value in the
<     range from **1** to  **rank(array)__.
>   : shall be a scalar of type _integer_ with a value in the
< The result is of the same type as **array__.
< [__product**(3)](PRODUCT),
< [__sum**(3)](SUM),
< [__hypot**(3)](HYPOT)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/NOT.md _pages/NOT.md
<     : The type shall be _integer_.
>   : The type shall be _integer_.
< [__iand**(3)](IAND),
< [__ior**(3)](IOR),
< [__ieor**(3)](IEOR),
< [__ibits**(3)](IBITS),
< [__ibset**(3)](IBSET),
< [__ibclr**(3)](IBCLR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/NULL.md _pages/NULL.md
< [__associated**(3)](ASSOCIATED)
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: NUMERIC_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/NUM_IMAGES.md _pages/NUM_IMAGES.md
> ## num_images
< **num\_images**(3) - \[COLLECTIVE\] Number of images
> **num_images**(3) - \[COLLECTIVE\] Number of images
<     : (optional, **intent(in)__) Nonnegative scalar integer
<     : (optional, **intent(in)__) Scalar logical expression
< [__this\_image**(3)](THIS_IMAGE),
< [__image\_index**(3)](THIS_INDEX)
> [**this_image**(3)](THIS_IMAGE),
> [**image_index**(3)](THIS_INDEX)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/PACK.md _pages/PACK.md
< equals **.true.__. Afterwards, positions are filled with elements taken from
< **vector__.
<     : Shall be an array of type _logical_ and of the same size as **array__.
<     Alternatively, it may be a _logical_ scalar.
<     or greater than the number of true elements in **mask__. If **mask** is
<     greater than the number of elements in **array__.
>   : Shall be an array of type _logical_ and of the same size as **array**.
>   Alternatively, it may be a _logical_ scalar.
< The result is an array of rank one and the same type as that of **array__.
< [__unpack**(3)](UNPACK),
< [__merge**(3)](MERGE),
< [__pack**(3)](PACK),
< [__spread**(3)](SPREAD),
< [__unpack**(3)](UNPACK)   
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: PARALLEL_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/PARITY.md _pages/PARITY.md
< dimension **dim__.
> ### __Description__
> Calculates the parity (i.e. the reduction using .xor.) of __mask__ along
> dimension __dim__.
> ### __Arguments__
>   - __mask__
>   - __dim__
<     range from **1 to n**, where **n** equals the rank of **mask__.
>     range from __1 to n__, where __n__ equals the rank of __mask__.
> ### __Returns__
< The result is of the same type as **mask__.
> The result is of the same type as __mask__.
> If __dim__ is absent, a scalar with the parity of all elements in __mask__ is
> returned: __.true.__ if an odd number of elements are __.true.__ and __.false.__
> When __dim__ is specified the returned shape is similar to that of __mask__
> with dimension __dim__ dropped.
> ### __Examples__
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/POPCNT.md _pages/POPCNT.md
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
< [__poppar**(3)](POPPAR),
< [__leadz**(3)](LEADZ),
< [__trailz**(3)](TRAILZ)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/POPPAR.md _pages/POPPAR.md
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
< [__popcnt**(3)](POPCNT),
< [__leadz**(3)](LEADZ),
< [__trailz**(3)](TRAILZ)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/PRECISION.md _pages/PRECISION.md
< of **x__.
<     : Shall be of type _real_ or _complex_.
>   : Shall be of type _real_ or _complex_.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/PRESENT.md _pages/PRESENT.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/PRODUCT.md _pages/PRODUCT.md
< dimension **dim** if the corresponding element in **mask** is **.true.__.
< returned. (Note a zero-sized **array** returns **1__).
<     : Shall be an array of type _integer_, _real_ or _complex_.
>   : Shall be an array of type _integer_, _real_ or _complex_.
<     : shall be a scalar of type _integer_ with a value in the
<     range from **1 to n**, where **n** equals the rank of **array__.
<     : shall be of type _logical_ and either be a scalar or an
<     array of the same shape as **array__.
>   : shall be a scalar of type _integer_ with a value in the
>   : shall be of type _logical_ and either be a scalar or an
< The result is of the same type as **array__.
< character(len=1),parameter :: nl=new_line('a') 
> character(len=1),parameter :: nl=new_line('a')
< [__sum**(3)](SUM), note that an element by element multiplication is done
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/RADIX.md _pages/RADIX.md
< where TYPE is _integer_ or _real_ and KIND is any kind supported by
< **radix(x)** returns the base of the model representing the entity **x__.
>   : Shall be of type _integer_ or _real_
> The return value is a scalar of type _integer_ and of the default integer
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: RANDOM_INIT.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/RANDOM_NUMBER.md _pages/RANDOM_NUMBER.md
> ## random_number
< **random\_number**(3) - \[MATHEMATICS:RANDOM\] Pseudo-random number
> **random_number**(3) - \[MATHEMATICS:RANDOM\] Pseudo-random number
<    call random_number(harvest)
<      subroutine random_number(harvest)
>    random_number(harvest)
<     : a scalar or an array of type _real_ that will be set with
>   : Shall be a scalar or an array of type _real_.
< integer              :: i, n, first,last, rand_int
> integer              :: rand_int
<    call random_seed() ! initialize random number sequence
>    call random_seed(size = n)
>    call random_seed(get=seed)
<       call random_number(rand_val)
<       rand_int=first+floor((last+1-first)*rand_val)
<       if(rand_int.ge.first.and.rand_int.le.last)then
<          count(rand_int)=count(rand_int)+1
<          write(*,*)rand_int,' is out of range'
>          call random_number(rand_val)
>          rand_int=first+floor((last+1-first)*rand_val)
>          if(rand_int.ge.first.and.rand_int.le.last)then
>             count(rand_int)=count(rand_int)+1
>             write(*,*)rand_int,' is out of range'
< [__random\_seed**(3)](RANDOM_SEED)
> [**random_seed**(3)](RANDOM_SEED)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/RANDOM_SEED.md _pages/RANDOM_SEED.md
> ## random_seed
< **random\_seed**(3) - \[MATHEMATICS:RANDOM\] Pseudorandom number generator control.
> **random_seed**(3) - \[MATHEMATICS:RANDOM\] Initialize a pseudo-random number sequence
<    subroutine random_seed(size, put, get)
< **random\_seed(3f)** initializes and/or queries the seed used by the
< pseudorandom number generator procedure **random\_number(3f)__.  It can
< To reproduce the same sequence of pseudo\_random values one needs to
< algorithm should be used by the random\_number(3f) procedure so different
< Do not depend on whether random\_number(3f) generates the same or a random
< sequence by default the first time it is called. If **random\_seed()**
< by **random\_number()__.
> by random_number.
> If random_seed is called without arguments, it is seeded with random
<       as the seed arrays **put** and **get__.
<     **random\_seed() to reset the pseudorandom sequence returned by
<     random\_number(3f) to the same sequence.
<     that would be generated by the next call to random_\number(3f),
<     and so changes with each call to random\_number(3f).
>   : (Optional) Shall be a scalar and of type default _integer_, with
>   : (Optional) Shall be an array of type default _integer_ and rank one.
>   : (Optional) Shall be an array of type default _integer_ and rank one.
<    CALL RANDOM_SEED() ! Processor-dependent initialization
<    ! generate some random_numbers
<    call random_number(vals)
<    call random_seed(put=seed)
<    call random_number(vals)
< [__random\_number**(3)](RANDOM_NUMBER),
< [__random\_init(3)](RANDOM_INIT)
> [**random_number**(3)](RANDOM_NUMBER)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/RANGE.md _pages/RANGE.md
<    where TYPE is _real_ or _complex_ and KIND is any kind supported by 
> where TYPE is _real_ or _complex_ and KIND is any kind supported by
< of **x__.
<     : Shall be of type _real_ or _complex_.
>   : Shall be of type _real_ or _complex_.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/RANK.md _pages/RANK.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/REAL.md _pages/REAL.md
<     : Shall be _integer_, _real_, or _complex_.
>   : Shall be _integer_, _real_, or _complex_.
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< [__dble**(3)](DBLE),
< [__float**(3)](FLOAT)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/REPEAT.md _pages/REPEAT.md
<     Shall be scalar and of type _character_.
<     : Number of copies to make of _string_, greater than or equal to zero (0).
<     Shall be scalar and of type _integer_.
>   Shall be scalar and of type _character_.
>   : Number of copies to make of _string_, greater than or equal to zero (0).
>   Shall be scalar and of type _integer_.
< A new scalar of type _character_ built up from **ncopies** copies of **string__.
> A new scalar of type _character_ built up from **ncopies** copies of **string**.
<    **____________________________________________________________________**
>    ________________________________________________________________________
<     [__adjustl**(3)](ADJUSTL),
<     [__adjustr**(3)](ADJUSTR),
<     [__index**(3)](INDEX),
<     [__scan**(3)](SCAN),
<     [__verify**(3)](VERIFY)
<     [__len\_trim**(3)](LEN_TRIM),
<     [__len**(3)](LEN),
<     [__repeat**(3)](REPEAT),
<     [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/RESHAPE.md _pages/RESHAPE.md
< Reshapes array **source** to correspond to **shape__. If necessary, the new
< **order__.
<     : an array of rank one and type _integer_. Its values must be positive
<     : (Optional) an array of the same type as **source__.
<     : (Optional) an array of type _integer_ and the same shape as **shape__. Its
<     the size of **shape__. If **order** is absent, the natural ordering shall be
>   : an array of rank one and type _integer_. Its values must be positive
>   : (Optional) an array of type _integer_ and the same shape as **shape**. Its
< The result is an array of shape **shape** with the same type as **source__.
< [__shape**(3)](SHAPE)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/RRSPACING.md _pages/RRSPACING.md
< **rrspacing**(3) - \[MODEL\_COMPONENTS\] Reciprocal of the relative spacing
> **rrspacing**(3) - \[MODEL_COMPONENTS\] Reciprocal of the relative spacing
< numbers near **x__.
<     : Shall be of type _real_.
>   : Shall be of type _real_.
< The return value is of the same type and kind as **x__. The value returned
< is equal to **abs(fraction(x)) \* float(radix(x))\*\*digits(x)__.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SAME_TYPE_AS.md _pages/SAME_TYPE_AS.md
> ## same_type_as
< **same\_type\_as**(3) - \[STATE\] Query dynamic types for equality
> **same_type_as**(3) - \[STATE\] Query dynamic types for equality
< only if the dynamic type of **a** is the same as the dynamic type of **b__.
< [__extends\_type\_of**(3)](EXTENDS_TYPE_OF)
> [**extends_type_of**(3)](EXTENDS_TYPE_OF)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SCALE.md _pages/SCALE.md
< **scale**(3) - \[MODEL\_COMPONENTS\] Scale a real value by a whole power of the radix
> **scale**(3) - \[MODEL_COMPONENTS\] Scale a real value by a whole power of the radix
< **scale(x,i)** returns x \* **radix(x)\*\*i__.
<     : The type of the argument shall be a _real_.
>   : The type of the argument shall be a _real_.
<     : The type of the argument shall be a _integer_.
>   : The type of the argument shall be a _integer_.
< The return value is of the same type and kind as **x__. Its value is 
< **x \* radix(x)\*\*i__.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SCAN.md _pages/SCAN.md
< position of the leftmost character of **STRING** that is in **set__. If **back**
<     : Shall be of type _character_.
>   : Shall be of type _character_.
<     : Shall be of type _character_.
>   : Shall be of type _character_.
<     : (Optional) shall be of type _logical_.
>   : (Optional) shall be of type _logical_.
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind** is absent,
> The return value is of type _integer_ and of kind **kind**. If **kind** is absent,
<     [__adjustl**(3)](ADJUSTL), [__adjustr**(3)](ADJUSTR), [__index**(3)](INDEX),
<     [__scan**(3)](SCAN), [__verify**(3)](VERIFY)
<     [__len\_trim**(3)](LEN_TRIM),
<     [__len**(3)](LEN),
<     [__repeat**(3)](REPEAT), [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SELECTED_CHAR_KIND.md _pages/SELECTED_CHAR_KIND.md
> ## selected_char_kind
< **selected\_char\_kind**(3) - \[KIND\] Choose character kind such as "Unicode"
> **selected_char_kind**(3) - \[KIND\] Choose character kind such as "Unicode"
< **selected\_char\_kind(name)** returns the kind value for the character
> **selected_char_kind(name)** returns the kind value for the character
< and "DEFAULT" (iwhich are equivalent), and "ISO\_10646" (Universal
> and "DEFAULT" (iwhich are equivalent), and "ISO_10646" (Universal
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SELECTED_INT_KIND.md _pages/SELECTED_INT_KIND.md
> ## selected_int_kind
< **selected\_int\_kind**(3) - \[KIND\] Choose integer kind
> **selected_int_kind**(3) - \[KIND\] Choose integer kind
< **selected\_int\_kind(r)** return the kind value of the smallest integer
> **selected_int_kind(r)** return the kind value of the smallest integer
< this range, selected\_int\_kind returns **-1__.
> this range, selected_int_kind returns **-1**.
<     : Shall be a scalar and of type _integer_.
>   : Shall be a scalar and of type _integer_.
< [__aint**(3)](AINT),
< [__anint**(3)](ANINT),
< [__int**(3)](INT),
< [__nint**(3)](NINT),
< [__ceiling**(3)](CEILING),
< [__floor**(3)](FLOOR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SELECTED_REAL_KIND.md _pages/SELECTED_REAL_KIND.md
> ## selected_real_kind
< **selected\_real\_kind**(3) - \[KIND\] Choose real kind
> **selected_real_kind**(3) - \[KIND\] Choose real kind
< **selected\_real\_kind(p, r, radix)** return the kind value of a real
> **selected_real_kind(p, r, radix)** return the kind value of a real
< at least **r**, and with a radix of **radix__.
<     : (Optional) shall be a scalar and of type _integer_.
>   : (Optional) shall be a scalar and of type _integer_.
<     : (Optional) shall be a scalar and of type _integer_.
>   : (Optional) shall be a scalar and of type _integer_.
<     : (Optional) shall be a scalar and of type _integer_.
>   : (Optional) shall be a scalar and of type _integer_.
< selected\_real\_kind returns the value of the kind type parameter of a
> selected_real_kind returns the value of the kind type parameter of a
< exponent range of at least R, and with the requested **radix__. If the **radix**
< [__precision**(3)](PRECISION),
< [__range**(3)](RANGE),
< [__radix**(3)](RADIX)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SET_EXPONENT.md _pages/SET_EXPONENT.md
> ## set_exponent
< **set\_exponent**(3) - \[MODEL\_COMPONENTS\] Set the exponent of the model
> **set_exponent**(3) - \[MODEL_COMPONENTS\] Set the exponent of the model
< **set\_exponent(x, i)** returns the real number whose fractional part is
< that of **x** and whose exponent part is **i__.
> **set_exponent(x, i)** returns the real number whose fractional part is
<     : Shall be of type _real_.
>   : Shall be of type _real_.
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
< The return value is of the same type and kind as **x__. The real number
< returned; it is **fraction(x) \* radix(x)\*\*i__.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__spacing**(3)](SPACING),
< [__tiny**(3)](TINY)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SHAPE.md _pages/SHAPE.md
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< [__reshape**(3)](RESHAPE),
< [__size**(3)](SIZE)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SHIFTA.md _pages/SHIFTA.md
< **bit\_size(i)**, the value is undefined. Bits shifted out from the
> **bit_size(i)**, the value is undefined. Bits shifted out from the
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
< The return value is of type _integer_ and of the same kind as **i__.
> The return value is of type _integer_ and of the same kind as **i**.
< [__shiftl**(3)](SHIFTL),
< [__shiftr**(3)](SHIFTR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SHIFTL.md _pages/SHIFTL.md
< **bit\_size(i)**, the value is undefined. Bits shifted out from the left
< end are lost, and bits shifted in from the right end are set to **0__.
> **bit_size(i)**, the value is undefined. Bits shifted out from the left
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
< The return value is of type _integer_ and of the same kind as **i__.
> The return value is of type _integer_ and of the same kind as **i**.
< [__shifta**(3)](SHIFTA),
< [__shiftr**(3)](SHIFTR)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SHIFTR.md _pages/SHIFTR.md
< **bit\_size(i)**, the value is undefined. Bits shifted out from the
> **bit_size(i)**, the value is undefined. Bits shifted out from the
<     : The type shall be _integer_.
>   : The type shall be _integer_.
<     : The type shall be _integer_.
>   : The type shall be _integer_.
< The return value is of type _integer_ and of the same kind as **i__.
> The return value is of type _integer_ and of the same kind as **i**.
< [__shifta**(3)](SHIFTA),
< [__shiftl**(3)](SHIFTL)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SIGN.md _pages/SIGN.md
< where TYPE may be _real_ or _integer_ and KIND is any supported kind
< **sign**(a,b) returns the value of **a** with the sign of **b__.
> where TYPE may be _real_ or _integer_ and KIND is any supported kind for the type.
> ### __Description__
> __sign__(a,b) returns the value of __a__ with the sign of __b__.
> For processors that distinguish between positive and negative zeros  __sign()__ may be used to
> distinguish between __real__ values 0.0 and −0.0. SIGN (1.0, -0.0) will
> ### __Arguments__
>   - __a__
>   - __b__
>     : Shall be of the same type and kind as __a__
> ### __Returns__
< **b__. That is,
> The kind of the return value is the magnitude of __a__ with the sign of  __b__. That is,
<    - else if **b < 0** it is -__abs(a)__.
<    - if **b** is _real_ and the processor distinguishes between **-0.0**
>      -  If __b \>= 0__ then the result is __abs(a)__
>      -  else if __b < 0__ it is -__abs(a)__.
>      - if __b__ is _real_ and the processor distinguishes between __-0.0__ and __0.0__ then the
>        result is __-abs(a)__
> ### __Examples__
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SINH.md _pages/SINH.md
< **sinh(x)** computes the hyperbolic sine of **x__.
<     : The type shall be _real_ or _complex_.
>   : The type shall be _real_ or _complex_.
< The return value has same type and kind as **x__.
< [__asinh**(3)](ASINH)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SIN.md _pages/SIN.md
<     : The type shall be _real_ or _complex_ in radians.
>   : The type shall be _real_ or _complex_ in radians.
<     : The return value has the same type and kind as **x__.
< [__asin**(3)](ASIN),
< [__cos**(3)](COS),
< [__tan**(3)](TAN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SIZE.md _pages/SIZE.md
<     : shall be a scalar of type _integer_ and its value shall be
<     in the range from 1 to n, where n equals the rank of **array__.
<     : An _integer_ initialization expression indicating the kind
>   : shall be a scalar of type _integer_ and its value shall be
>   : An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind**
> The return value is of type _integer_ and of kind **kind**. If **kind**
< [__shape**(3)](SHAPE),
< [__reshape**(3)])(RESHAPE)
> [__reshape__(3)])(RESHAPE)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SPACING.md _pages/SPACING.md
< **spacing**(3) - \[MODEL\_COMPONENTS\] Smallest distance between two numbers of a given type
> **spacing**(3) - \[MODEL_COMPONENTS\] Smallest distance between two numbers of a given type
<     : Shall be of type _real_.
>   : Shall be of type _real_.
< The result is of the same type as the input argument **x__.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set\_exponent**(3)](SET_EXPONENT),
< [__tiny**(3)](TINY)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SPREAD.md _pages/SPREAD.md
< dimension **dim__.
<     : Shall be a scalar of type _integer_ with a value in the range from
<     **1** to **n+1**, where **n** equals the rank of **source__.
>   : Shall be a scalar of type _integer_ with a value in the range from
<     : Shall be a scalar of type _integer_.
>   : Shall be a scalar of type _integer_.
< where **n** equals the rank of **source__.
< [__pack**(3)](PACK),
< [__unpack**(3)](UNPACK),
< [__merge**(3)](MERGE),
< [__pack**(3)](PACK),
< [__unpack**(3)](UNPACK)   
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SQRT.md _pages/SQRT.md
< **sqrt(x)** computes the principal square root of **x__.
< that **y*y = x__.
< Every nonnegative  number _x_ has two square roots of the same unique
> Every nonnegative number _x_ has two square roots of the same unique
<     The type shall be _real_ or _complex_.
>   The type shall be _real_ or _complex_.
< the same as **x__.
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: STATE_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/STORAGE_SIZE.md _pages/STORAGE_SIZE.md
> ## storage_size
< **storage\_size**(3) - \[BIT:INQUIRY\] Storage size in bits
> **storage_size**(3) - \[BIT:INQUIRY\] Storage size in bits
< dynamic type and type parameters of **a__.
< [__c\_sizeof**(3)](C_SIZEOF)
> [**c_sizeof**(3)](C_SIZEOF)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SUM.md _pages/SUM.md
<     : Shall be an array of type _integer_, _real_ or _complex_.
>   : Shall be an array of type _integer_, _real_ or _complex_.
<     : (Optional) shall be a scalar of type _integer_ with a value in the
<     : (Optional) shall be of type _logical_ and either be a scalar or an
>   : (Optional) shall be a scalar of type _integer_ with a value in the
>   : (Optional) shall be of type _logical_ and either be a scalar or an
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/SYSTEM_CLOCK.md _pages/SYSTEM_CLOCK.md
> ## system_clock
< **system\_clock**(3) - \[SYSTEM:TIME\] Return numeric data from a real-time clock.
> **system_clock**(3) - \[SYSTEM:TIME\] Return numeric data from a real-time clock.
< **system\_clock** lets you measure durations of time with the precision of
> **system_clock** lets you measure durations of time with the precision of
< the value **count\_max** is reached and is then reset to zero at the next
> the value **count_max** is reached and is then reset to zero at the next
< count\_max__. **count\_rate** and **count\_max** are assumed constant (even though
> count_max**. **count_rate** and **count_max** are assumed constant (even though
< **count\_rate** is system dependent and can vary depending on the kind of
> **count_rate** is system dependent and can vary depending on the kind of
< **-huge(count)**, and **count\_rate** and **count\_max** are set to zero.
> **-huge(count)**, and **count_rate** and **count_max** are set to zero.
< **system\_clock** is typically used to measure short time intervals (system
> **system_clock** is typically used to measure short time intervals (system
<     : (optional) shall be an _integer_ scalar. It is assigned a
<     until the value **count\_max** is reached and is reset to zero at the
<     next count. It lies in the range **0** to **count\_max** if there is a
<   - **count\_rate**
<     : (optional) shall be an _integer_ or _real_ scalar. It is assigned a
<   - **count\_max**
<     : (optional) shall be an _integer_ scalar. It is assigned the maximum
>   : (optional) shall be an _integer_ scalar. It is assigned a
>   until the value **count_max** is reached and is reset to zero at the
>   next count. It lies in the range **0** to **count_max** if there is a
> - **count_rate**
>   : (optional) shall be an _integer_ or _real_ scalar. It is assigned a
> - **count_max**
>   : (optional) shall be an _integer_ scalar. It is assigned the maximum
< [__date\_and\_time**(3)](DATE_AND_TIME),
< [__cpu\_time**(3)](CPU_TIME)
> [**date_and_time**(3)](DATE_AND_TIME),
> [**cpu_time**(3)](CPU_TIME)
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: SYSTEM_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/TANH.md _pages/TANH.md
< **tanh(x)** computes the hyperbolic tangent of **x__.
<     : The type shall be _real_ or _complex_.
>   : The type shall be _real_ or _complex_.
< The return value has same type and kind as **x__. If **x** is complex, the
< [__atanh**(3)](ATANH)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/TAN.md _pages/TAN.md
< **tan(x)** computes the tangent of **x__.
<     : The type shall be _real_ or _complex_.
>   : The type shall be _real_ or _complex_.
< The return value has the same type and kind as **x__.
< [__atan**(3)](ATAN),
< [__cos**(3)](COS),
< [__sin**(3)](SIN)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/THIS_IMAGE.md _pages/THIS_IMAGE.md
> ## this_image
< **this\_image**(3) - \[COLLECTIVE\] Cosubscript index of this image
> **this_image**(3) - \[COLLECTIVE\] Cosubscript index of this image
<     : (optional, **intent(in)__) Nonnegative scalar integer (not permitted
<     together with **coarray__).
<     one and the corank of **coarray__.
< **this\_image(coarray)__.
> **this_image(coarray)**.
> ### __Standard__
> ### __See Also__
< [__num\_images**(3)](NUM_IMAGES),
< [__image\_index**(3)](IMAGE_INDEX)
> [__num\_images__(3)](NUM_IMAGES),
> [__image\_index__(3)](IMAGE_INDEX)
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/TINY.md _pages/TINY.md
<   where KIND may be any kind supported by type _real_
> where KIND may be any kind supported by type _real_
< and kind of **x__.
<     : Shall be of type _real_.
>   : Shall be of type _real_.
< The return value is of the same type and kind as **x__.
< [__digits**(3)](DIGITS),
< [__epsilon**(3)](EPSILON),
< [__exponent**(3)](EXPONENT),
< [__fraction**(3)](FRACTION),
< [__huge**(3)](HUGE),
< [__maxexponent**(3)](MAXEXPONENT),
< [__minexponent**(3)](MINEXPONENT),
< [__nearest**(3)](NEAREST),
< [__precision**(3)](PRECISION),
< [__radix**(3)](RADIX),
< [__range**(3)](RANGE),
< [__rrspacing**(3)](RRSPACING),
< [__scale**(3)](SCALE),
< [__set_exponent**(3)](SET_EXPONENT),
< [__spacing**(3)](SPACING)
> [**set_exponent**(3)](SET_EXPONENT),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/TRAILZ.md _pages/TRAILZ.md
<     : Shall be of type _integer_.
>   : Shall be of type _integer_.
< I are zero, the result value is **bit\_size(i)__.
> I are zero, the result value is **bit_size(i)**.
< [__bit\_size**(3)](BIT_SIZE),
< [__popcnt**(3)](POPCNT),
< [__poppar**(3)](POPPAR),
< [__leadz**(3)](LEADZ)
> [**bit_size**(3)](BIT_SIZE),
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/TRANSFER.md _pages/TRANSFER.md
< parameters as **mold__.
<     : (Optional) shall be a scalar of type _integer_.
>   : (Optional) shall be a scalar of type _integer_.
< of **source__. If **size** is present, the result is a one-dimensional array of
< length **size__. If **size** is absent but **mold** is an array (of any size or
< needed to contain the entirety of the bitwise representation of **source__.
< _Joe Krahn_: Fortran uses **molding** rather than **casting__.
> _Joe Krahn_: Fortran uses **molding** rather than **casting**.
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: TRANSFORM_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/TRANSPOSE.md _pages/TRANSPOSE.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/TRIM.md _pages/TRIM.md
<     : Shall be a scalar of type _character_.
>   : Shall be a scalar of type _character_.
<  [__adjustl**(3)](ADJUSTL),
<  [__adjustr**(3)](ADJUSTR),
<  [__index**(3)](INDEX),
<  [__scan**(3)](SCAN),
<  [__verify**(3)](VERIFY)
<  [__len\_trim**(3)](LEN_TRIM),
<  [__len**(3)](LEN),
<  [__repeat**(3)](REPEAT),
<  [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: TYPE_index.md
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/UBOUND.md _pages/UBOUND.md
<     : (Optional) Shall be a scalar _integer_.
>   : (Optional) Shall be a scalar _integer_.
<     : (Optional) An _integer_ initialization expression indicating the kind
>   : (Optional) An _integer_ initialization expression indicating the kind
< The return value is of type _integer_ and of kind **kind__. If **kind**
> The return value is of type _integer_ and of kind **kind**. If **kind**
< **array__.
< [__lbound**(3)](LBOUND),
< [__co\_ubound**(3)](CO_UBOUND),
< [__co\_lbound**(3)(CO_LBOUND)]
> [**co_ubound**(3)](CO_UBOUND),
> [__co\_lbound__(3)(CO_LBOUND)]
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/UNPACK.md _pages/UNPACK.md
<     : Shall be an array of type _logical_.
>   : Shall be an array of type _logical_.
<     : Shall be of the same type as **vector** and have the same shape as **mask__.
< [__pack**(3)](PACK),
< [__merge**(3)](MERGE),
< [__pack**(3)](PACK),
< [__spread**(3)](SPREAD),
< [__unpack**(3)](UNPACK)   
diff -r /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics/VERIFY.md _pages/VERIFY.md
< not in **set__.
>   : Shall be of type _character_.
<     : set of characters that are acceptable to find in **string__.
>   : Shall be of type _character_.
<     : An _integer_ initialization expression indicating the kind parameter
>   : shall be of type _logical_.
>   : An _integer_ initialization expression indicating the kind
> The return value is of type _integer_ and of kind **kind**. If **kind**
<     [__adjustl**(3)](ADJUSTL),
<     [__adjustr**(3)](ADJUSTR),
<     [__index**(3)](INDEX),
<     [__scan**(3)](SCAN), 
<     [__verify**(3)](VERIFY)
<     [__len\_trim**(3)](LEN_TRIM),
<     [__len**(3)](LEN),
<     [__repeat**(3)](REPEAT), 
<     [__trim**(3)](TRIM)
>   [**len_trim**(3)](LEN_TRIM),
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: .viminfo
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: x
Only in /home/urbanjs/venus/V600/github/M_intrinsics/intrinsics: x~

NAME

DPROD(3) - [NUMERIC] Double precision real product

SYNTAX

       elemental function dprod(x,y)

        real,intent(in) :: x
        real,intent(in) :: y
        doubleprecision :: dprod

DESCRIPTION

DPROD(X,Y) produces a doubleprecision product of default real values X
and Y.

The result has a value equal to a processor-dependent approximation to
the product of X and Y. It is recommended that the processor compute the
product in double precision, rather than in single precision then
converted to double precision.

ARGUMENTS

-   X : the multiplier, a real value of default kind

-   Y : the multiplicand, a real value of default kind. Y Must have the
    same type and kind parameters as X

The setting of compiler options specifying the size of a default real
can affect this function.

RETURNS

The return value is of type real(kind=kind(0.0d0)). It should have the
same value as DBLE(X)*DBLE(Y).

EXAMPLES

Sample program:

    program demo_dprod
    use, intrinsic :: iso_fortran_env, only : real_kinds, &
    & real32, real64, real128
    implicit none
    integer,parameter :: dp=kind(0.0d0)
    real :: x = 5.2
    real :: y = 2.3
    real(kind=dp) :: dd

       ! basic usage
       dd = dprod(x,y)
       print *, 'compare dprod(xy)=',dd, &
       & 'to x*y=',x*y, &
       & 'to dble(x)*dble(y)=',dble(x)*dble(y)

       ! elemental
       print *, dprod( [2.3,3.4,4.5], 10.0 )
       print *, dprod( [2.3,3.4,4.5], [9.8,7.6,5.4] )

       ! other interesting comparisons
       print *, 'integer multiplication of digits=',52*23
       print *, 52*23/100.0
       print *, 52*23/100.0d0

       !! A common extension is to take doubleprecision arguments
       !! and return higher precision when available
       bigger: block
       doubleprecision :: xx = 5.2_dp
       doubleprecision :: yy = 2.3_dp
       print *, 'dprop==>',dprod(xx,yy)
       print *, 'multipy==>',xx*yy
       print *, 'using dble==>',dble(xx)*dble(yy)
       print *, 'kind of arguments is',kind(xx)
       print *, 'kind of result is',kind(dprod(xx,yy))
       endblock bigger

    end program demo_dprod

Results: (this can vary between programming environments):

        compare dprod(xy)= 11.9599993133545 to x*y= 11.96000
        to dble(x)*dble(y)= 11.9599993133545
          22.9999995231628  34.0000009536743  45.0000000000000
          22.5399999713898  25.8400004005432  24.3000004291534
        integer multiplication of digits=        1196
          11.96000
          11.9600000000000
        dprop==>   11.9599999999999994848565165739273
        multipy==>   11.9600000000000
        using dble==>   11.9600000000000
        kind of arguments is           8
        kind of result is          16

STANDARD

FORTRAN 77 and later

fortran-lang intrinsic descriptions (license: MIT) @urbanjost

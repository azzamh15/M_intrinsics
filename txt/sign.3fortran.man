NAME

SIGN(3) - [NUMERIC] Sign copying function

SYNTAX

    result = sign(a, b)

        elemental function sign(a, b)
        type(TYPE(kind=KIND))            :: sign
        type(TYPE(kind=KIND)),intent(in) :: a, b

where TYPE may be real or integer and KIND is any supported kind for the
type.

DESCRIPTION

SIGN(a,b) return a value with the magnitude of A but with the sign of B.

For processors that distinguish between positive and negative zeros
SIGN() may be used to distinguish between REAL values 0.0 and −0.0. SIGN
(1.0, -0.0) will return −1.0 when a negative zero is distinguishable.

ARGUMENTS

-   A : The value whos magnitude will be returned. Shall be of type
    integer or real

-   B : The value whose sign will be returned. Shall be of the same type
    and kind as A

RETURNS

The kind of the return value is the magnitude of A with the sign of B.
That is,

-   If B >= 0 then the result is ABS(A)
-   else if B < 0 it is -ABS(A).
-   if B is real and the processor distinguishes between -0.0 and 0.0
    then the result is -ABS(A)

EXAMPLES

Sample program:

    program demo_sign
    implicit none
       print *,  sign( -12,  1 )
       print *,  sign( -12,  0 )
       print *,  sign( -12, -1 )

       print *,  sign( -12.0, [1.0, 0.0, -1.0] )

       print *,  'can I distinguish 0 from -0? ', &
       &  sign( 1.0, -0.0 ) .ne. sign( 1.0, 0.0 )
    end program demo_sign

Results:

                 12
                 12
                -12
          12.00000       12.00000      -12.00000
        can I distinguish 0 from -0?  F

STANDARD

FORTRAN 77 and later

fortran-lang intrinsic descriptions (license: MIT) @urbanjost

{"blocks":[{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Name"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"null"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"[TRANSFORMATIONAL]"},{"t":"Space"},{"t":"Str","c":"Function"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"returns"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"disassociated"},{"t":"Space"},{"t":"Str","c":"pointer"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Synopsis"}]}]]},{"t":"CodeBlock","c":[["",["fortran"],[]],"    ptr => null( [mold] )\n"]},{"t":"CodeBlock","c":[["",["fortran"],[]],"     function null(mold)\n\n      type(TYPE(kind=**)),pointer,optional :: mold\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Characteristics"}]}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"mold"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"pointer"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"association"},{"t":"Space"},{"t":"Str","c":"status"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"type."}]}],[{"t":"Plain","c":[{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"disassociated"},{"t":"Space"},{"t":"Str","c":"pointer"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"unallocated"},{"t":"Space"},{"t":"Str","c":"allocatable"},{"t":"Space"},{"t":"Str","c":"entity."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Description"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"null"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"returns"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"disassociated"},{"t":"Space"},{"t":"Str","c":"pointer."}]},{"t":"Para","c":[{"t":"Str","c":"If"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"mold"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"present,"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"disassociated"},{"t":"Space"},{"t":"Str","c":"pointer"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"same"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"SoftBreak"},{"t":"Str","c":"returned,"},{"t":"Space"},{"t":"Str","c":"otherwise"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"determined"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"context."}]},{"t":"Para","c":[{"t":"Str","c":"In"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"95"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"mold"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"optional."},{"t":"Space"},{"t":"Str","c":"Please"},{"t":"Space"},{"t":"Str","c":"note"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"2003"}]},{"t":"SoftBreak"},{"t":"Str","c":"includes"},{"t":"Space"},{"t":"Str","c":"cases"},{"t":"Space"},{"t":"Str","c":"where"},{"t":"Space"},{"t":"Str","c":"it"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"required."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Options"}]}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"mold"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"pointer"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"association"},{"t":"Space"},{"t":"Str","c":"status"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"SoftBreak"},{"t":"Str","c":"type."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Result"}]}]]},{"t":"Para","c":[{"t":"Str","c":"A"},{"t":"Space"},{"t":"Str","c":"disassociated"},{"t":"Space"},{"t":"Str","c":"pointer"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"unallocated"},{"t":"Space"},{"t":"Str","c":"allocatable"},{"t":"Space"},{"t":"Str","c":"entity."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Examples"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program:"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"!program demo_null\nmodule showit\nimplicit none\nprivate\ncharacter(len=*),parameter :: g='(*(g0,1x))'\npublic gen\n! a generic interface that only differs in the\n! type of the pointer the second argument is\ninterface gen\n module procedure s1\n module procedure s2\nend interface\n\ncontains\n\nsubroutine s1 (j, pi)\n integer j\n integer, pointer :: pi\n   if(associated(pi))then\n      write(*,g)'Two integers in S1:,',j,'and',pi\n   else\n      write(*,g)'One integer in S1:,',j\n   endif\nend subroutine s1\n\nsubroutine s2 (k, pr)\n integer k\n real, pointer :: pr\n   if(associated(pr))then\n      write(*,g)'integer and real in S2:,',k,'and',pr\n   else\n      write(*,g)'One integer in S2:,',k\n   endif\nend subroutine s2\n\nend module showit\n\nprogram demo_null\nuse showit, only : gen\n\nreal,target :: x = 200.0\ninteger,target :: i = 100\n\nreal, pointer :: real_ptr\ninteger, pointer :: integer_ptr\n\n! so how do we call S1() or S2() with a disassociated pointer?\n\n! the answer is the null() function with a mold value\n\n! since s1() and s2() both have a first integer\n! argument the NULL() pointer must be associated\n! to a real or integer type via the mold option\n! so the following can distinguish whether s1(1)\n! or s2() is called, even though the pointers are\n! not associated or defined\n\ncall gen (1, null (real_ptr) )    ! invokes s2\ncall gen (2, null (integer_ptr) ) ! invokes s1\nreal_ptr => x\ninteger_ptr => i\ncall gen (3, real_ptr ) ! invokes s2\ncall gen (4, integer_ptr ) ! invokes s1\n\nend program demo_null\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]],"   One integer in S2:, 1\n   One integer in S1:, 2\n   integer and real in S2:, 3 and 200.000000\n   Two integers in S1:, 4 and 100\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Standard"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"95"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"See"},{"t":"Space"},{"t":"Str","c":"Also"}]}]]},{"t":"Para","c":[{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"associated"}]},{"t":"Str","c":"(3)"}],["#associated",""]]}]},{"t":"Para","c":[{"t":"Emph","c":[{"t":"Str","c":"fortran-lang"},{"t":"Space"},{"t":"Str","c":"intrinsic"},{"t":"Space"},{"t":"Str","c":"descriptions"},{"t":"Space"},{"t":"Str","c":"(license:"},{"t":"Space"},{"t":"Str","c":"MIT)"},{"t":"Space"},{"t":"Str","c":"@urbanjost"}]}]}],"pandoc-api-version":[1,17,5,4],"meta":{}}

{"blocks":[{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Name"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"random_number"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"[MATHEMATICS:RANDOM]"},{"t":"Space"},{"t":"Str","c":"Pseudo-random"},{"t":"Space"},{"t":"Str","c":"number"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Synopsis"}]}]]},{"t":"CodeBlock","c":[["",["fortran"],[]],"    call random_number(harvest)\n"]},{"t":"CodeBlock","c":[["",["fortran"],[]],"     subroutine random_number(harvest)\n\n      real,intent(out) :: harvest(..)\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Characteristics"}]}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"harvest"}]},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"are"},{"t":"Space"},{"t":"Str","c":"default"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"real"}]},{"t":"Space"},{"t":"Str","c":"variables"}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Description"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"random_number"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"returns"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"single"},{"t":"Space"},{"t":"Str","c":"pseudorandom"},{"t":"Space"},{"t":"Str","c":"number"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"SoftBreak"},{"t":"Str","c":"pseudorandom"},{"t":"Space"},{"t":"Str","c":"numbers"},{"t":"Space"},{"t":"Str","c":"from"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"uniform"},{"t":"Space"},{"t":"Str","c":"distribution"},{"t":"Space"},{"t":"Str","c":"over"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"range"},{"t":"SoftBreak"},{"t":"Str","c":"0"},{"t":"Space"},{"t":"Str","c":"<="},{"t":"Space"},{"t":"Str","c":"x"},{"t":"Space"},{"t":"Str","c":"<"},{"t":"Space"},{"t":"Str","c":"1."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Options"}]}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"harvest"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"Shall"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"scalar"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"real"}]},{"t":"Str","c":"."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Examples"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program:"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program demo_random_number\nuse, intrinsic :: iso_fortran_env, only : dp=>real64\nimplicit none\ninteger, allocatable :: seed(:)\ninteger              :: n\ninteger              :: first,last\ninteger              :: i\ninteger              :: rand_int\ninteger,allocatable  :: count(:)\nreal(kind=dp)        :: rand_val\n   call random_seed(size = n)\n   allocate(seed(n))\n   call random_seed(get=seed)\n   first=1\n   last=10\n   allocate(count(last-first+1))\n   ! To have a discrete uniform distribution on the integers\n   ! [first, first+1, ..., last-1, last] carve the continuous\n   ! distribution up into last+1-first equal sized chunks,\n   ! mapping each chunk to an integer.\n   !\n   ! One way is:\n   !   call random_number(rand_val)\n   ! choose one from last-first+1 integers\n   !   rand_int = first + FLOOR((last+1-first)*rand_val)\n      count=0\n      ! generate a lot of random integers from 1 to 10 and count them.\n      ! with a large number of values you should get about the same\n      ! number of each value\n      do i=1,100000000\n         call random_number(rand_val)\n         rand_int=first+floor((last+1-first)*rand_val)\n         if(rand_int.ge.first.and.rand_int.le.last)then\n            count(rand_int)=count(rand_int)+1\n         else\n            write(*,*)rand_int,' is out of range'\n         endif\n      enddo\n      write(*,'(i0,1x,i0)')(i,count(i),i=1,size(count))\nend program demo_random_number\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",[],[]],"   1 10003588\n   2 10000104\n   3 10000169\n   4 9997996\n   5 9995349\n   6 10001304\n   7 10001909\n   8 9999133\n   9 10000252\n   10 10000196\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Standard"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"95"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"See"},{"t":"Space"},{"t":"Str","c":"Also"}]}]]},{"t":"Para","c":[{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"random_seed"}]},{"t":"Str","c":"(3)"}],["#random_seed",""]]}]},{"t":"Para","c":[{"t":"Emph","c":[{"t":"Str","c":"fortran-lang"},{"t":"Space"},{"t":"Str","c":"intrinsic"},{"t":"Space"},{"t":"Str","c":"descriptions"}]}]}],"pandoc-api-version":[1,17,5,4],"meta":{}}

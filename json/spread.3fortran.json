{"blocks":[{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Name"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"spread"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"[ARRAY:CONSTRUCTION]"},{"t":"Space"},{"t":"Str","c":"Add"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"dimension"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"replicate"},{"t":"Space"},{"t":"Str","c":"data"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Synopsis"}]}]]},{"t":"CodeBlock","c":[["",["fortran"],[]],"    result = spread(source, dim, ncopies)\n"]},{"t":"CodeBlock","c":[["",["fortran"],[]],"     TYPE(kind=KIND) function spread(source, dim, ncopies)\n\n      TYPE(kind=KIND)             :: source(..)\n      integer(kind=**),intent(in) :: dim\n      integer(kind=**),intent(in) :: ncopies\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Characteristics"}]}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"source"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"scalar"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"Space"},{"t":"Str","c":"less"},{"t":"Space"},{"t":"Str","c":"than"},{"t":"Space"},{"t":"Str","c":"fifteen."}]}],[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"scalar"}]}],[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"ncopies"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"integer"},{"t":"Space"},{"t":"Str","c":"scalar"}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Description"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"spread"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"replicates"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"source"}]},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"along"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"specified"},{"t":"Space"},{"t":"Str","c":"dimension"},{"t":"SoftBreak"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Str","c":"."},{"t":"Space"},{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"copy"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"repeated"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"ncopies"}]},{"t":"Space"},{"t":"Str","c":"times."}]},{"t":"Para","c":[{"t":"Str","c":"So"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"add"},{"t":"Space"},{"t":"Str","c":"additional"},{"t":"Space"},{"t":"Str","c":"rows"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"matrix"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim=1"}]},{"t":"Space"},{"t":"Str","c":"would"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"used,"},{"t":"Space"},{"t":"Str","c":"but"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"SoftBreak"},{"t":"Str","c":"add"},{"t":"Space"},{"t":"Str","c":"additional"},{"t":"Space"},{"t":"Str","c":"rows"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim=2"}]},{"t":"Space"},{"t":"Str","c":"would"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"used,"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"example."}]},{"t":"Para","c":[{"t":"Str","c":"If"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"source"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"scalar,"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"size"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"resulting"},{"t":"Space"},{"t":"Str","c":"vector"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"ncopies"}]},{"t":"SoftBreak"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"each"},{"t":"Space"},{"t":"Str","c":"element"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"has"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"value"},{"t":"Space"},{"t":"Str","c":"equal"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"source"}]},{"t":"Str","c":"."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Options"}]}]]},{"t":"BulletList","c":[[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"source"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"input"},{"t":"Space"},{"t":"Str","c":"data"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"duplicate"}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"additional"},{"t":"Space"},{"t":"Str","c":"dimension"},{"t":"Space"},{"t":"Str","c":"value"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"range"},{"t":"Space"},{"t":"Str","c":"from"},{"t":"SoftBreak"},{"t":"Strong","c":[{"t":"Str","c":"1"}]},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"n+1"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"where"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"n"}]},{"t":"Space"},{"t":"Str","c":"equals"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"source"}]},{"t":"Str","c":"."}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"ncopies"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"number"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"copies"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"original"},{"t":"Space"},{"t":"Str","c":"data"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"generate"}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Result"}]}]]},{"t":"Para","c":[{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"same"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"source"}]},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"has"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"n+1"}]},{"t":"SoftBreak"},{"t":"Str","c":"where"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"n"}]},{"t":"Space"},{"t":"Str","c":"equals"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"source"}]},{"t":"Str","c":"."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Examples"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program:"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program demo_spread\nimplicit none\n\ninteger a1(4,3), a2(3,4), v(4), s\n\n   write(*,'(a)' ) &\n   'TEST SPREAD(3)                                      ', &\n   '  SPREAD(3) is a FORTRAN90 function which replicates', &\n   '  an array by adding a dimension.                   ', &\n   ' '\n\n   s = 99\n   call printi('suppose we have a scalar S',s)\n\n   write(*,*) 'to add a new dimension (1) of extent 4 call'\n   call printi('spread( s, dim=1, ncopies=4 )',spread ( s, 1, 4 ))\n\n   v = [ 1, 2, 3, 4 ]\n   call printi(' first we will set V to',v)\n\n   write(*,'(a)')' and then do \"spread ( v, dim=2, ncopies=3 )\"'\n   a1 = spread ( v, dim=2, ncopies=3 )\n   call printi('uses v as a column and makes 3 columns',a1)\n\n   a2 = spread ( v, 1, 3 )\n   call printi(' spread(v,1,3) uses v as a row and makes 3 rows',a2)\n\ncontains\n! CONVENIENCE ROUTINE; NOT DIRECTLY CONNECTED TO SPREAD(3)\nsubroutine printi(title,a)\nuse, intrinsic :: iso_fortran_env, only : stderr=>ERROR_UNIT,&\n & stdin=>INPUT_UNIT, stdout=>OUTPUT_UNIT\nimplicit none\n\n!@(#) print small 2d integer scalar, vector, matrix in row-column format\n\ncharacter(len=*),parameter   :: all='(\" \",*(g0,1x))'\ncharacter(len=*),intent(in)  :: title\ncharacter(len=20)            :: row\ninteger,intent(in)           :: a(..)\ninteger                      :: i\n\n   write(*,all,advance='no')trim(title)\n   ! select rank of input\n   select rank(a)\n   rank (0); write(*,'(a)')' (a scalar)'\n      write(*,'(\" > [ \",i0,\" ]\")')a\n   rank (1); write(*,'(a)')' (a vector)'\n      ! find how many characters to use for integers\n      write(row,'(i0)')ceiling(log10(max(1.0,real(maxval(abs(a))))))+2\n      ! use this format to write a row\n      row='(\" > [\",*(i'//trim(row)//':,\",\"))'\n      do i=1,size(a)\n         write(*,fmt=row,advance='no')a(i)\n         write(*,'(\" ]\")')\n      enddo\n   rank (2); write(*,'(a)')' (a matrix) '\n      ! find how many characters to use for integers\n      write(row,'(i0)')ceiling(log10(max(1.0,real(maxval(abs(a))))))+2\n      ! use this format to write a row\n      row='(\" > [\",*(i'//trim(row)//':,\",\"))'\n      do i=1,size(a,dim=1)\n         write(*,fmt=row,advance='no')a(i,:)\n         write(*,'(\" ]\")')\n      enddo\n   rank default\n      write(stderr,*)'*printi* did not expect rank=', rank(a), &\n       & 'shape=', shape(a),'size=',size(a)\n      stop '*printi* unexpected rank'\n   end select\n   write(*,all) '>shape=',shape(a),',rank=',rank(a),',size=',size(a)\n   write(*,*)\n\nend subroutine printi\n\nend program demo_spread\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]]," > TEST SPREAD(3)\n >   SPREAD(3) is a FORTRAN90 function which replicates\n >   an array by adding a dimension.\n >\n >  suppose we have a scalar S  (a scalar)\n >  > [ 99 ]\n >  >shape= ,rank= 0 ,size= 1\n >\n >  to add a new dimension (1) of extent 4 call\n >  spread( s, dim=1, ncopies=4 )  (a vector)\n >  > [  99 ]\n >  > [  99 ]\n >  > [  99 ]\n >  > [   0 ]\n >  >shape= 4 ,rank= 1 ,size= 4\n >\n >   first we will set V to  (a vector)\n >  > [  1 ]\n >  > [  2 ]\n >  > [  3 ]\n >  > [  4 ]\n >  >shape= 4 ,rank= 1 ,size= 4\n >\n >  and then do \"spread ( v, dim=2, ncopies=3 )\"\n >  uses v as a column and makes 3 columns  (a matrix)\n >  > [  1,  1,  1 ]\n >  > [  2,  2,  2 ]\n >  > [  3,  3,  3 ]\n >  > [  4,  4,  4 ]\n >  >shape= 4 3 ,rank= 2 ,size= 12\n >\n >   spread(v,1,3) uses v as a row and makes 3 rows  (a matrix)\n >  > [  1,  2,  3,  4 ]\n >  > [  1,  2,  3,  4 ]\n >  > [  1,  2,  3,  4 ]\n >  >shape= 3 4 ,rank= 2 ,size= 12\n >\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Standard"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"95"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"See"},{"t":"Space"},{"t":"Str","c":"Also"}]}]]},{"t":"Para","c":[{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"merge"}]},{"t":"Str","c":"(3)"}],["#merge",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"pack"}]},{"t":"Str","c":"(3)"}],["#pack",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"unpack"}]},{"t":"Str","c":"(3)"}],["#unpack",""]]}]},{"t":"Para","c":[{"t":"Emph","c":[{"t":"Str","c":"fortran-lang"},{"t":"Space"},{"t":"Str","c":"intrinsic"},{"t":"Space"},{"t":"Str","c":"descriptions"},{"t":"Space"},{"t":"Str","c":"(license:"},{"t":"Space"},{"t":"Str","c":"MIT)"},{"t":"Space"},{"t":"Str","c":"@urbanjost"}]}]},{"t":"RawBlock","c":["html","<!--\nwhen adding dimension 3,4,5, ... why is 15 not allowed if 16 is allowed?\n\nneed an illustration of what happens with higher dimension array\n-->\n"]}],"pandoc-api-version":[1,17,5,4],"meta":{}}

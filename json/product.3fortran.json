{"blocks":[{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Name"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"product"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"[ARRAY:REDUCTION]"},{"t":"Space"},{"t":"Str","c":"Product"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"elements"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Synopsis"}]}]]},{"t":"CodeBlock","c":[["",["fortran"],[]],"    result = product(array [,dim] [,mask])\n"]},{"t":"CodeBlock","c":[["",["fortran"],[]],"     NUMERIC function product(array, dim, mask)\n\n      NUMERIC,intent(in) :: array(..)\n      integer(kind=**),intent(in),optional :: dim\n      logical(kind=**),intent(in),optional :: mask(..)\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Characteristics"}]}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"designated"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Str","c":"**"},{"t":"Space"},{"t":"Str","c":"may"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"supported"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"type"}]}],[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"NUMERIC"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"numeric"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"kind."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Description"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"product"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"multiplies"},{"t":"Space"},{"t":"Str","c":"together"},{"t":"Space"},{"t":"Str","c":"all"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"selected"},{"t":"Space"},{"t":"Str","c":"elements"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"along"},{"t":"Space"},{"t":"Str","c":"dimension"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"if"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"corresponding"},{"t":"Space"},{"t":"Str","c":"element"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"SoftBreak"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":".true."}]},{"t":"Str","c":"."}]},{"t":"Para","c":[{"t":"Str","c":"If"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"absent,"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"scalar"},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"product"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"all"},{"t":"Space"},{"t":"Str","c":"elements"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"SoftBreak"},{"t":"Str","c":"returned."},{"t":"Space"},{"t":"Str","c":"(Note"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"zero-sized"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Space"},{"t":"Str","c":"returns"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"1"}]},{"t":"Str","c":")."}]},{"t":"Para","c":[{"t":"Str","c":"When"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"present,"},{"t":"Space"},{"t":"Str","c":"If"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"masked"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"has"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"dimension"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"one"},{"t":"SoftBreak"},{"t":"Str","c":"(ie."},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"vector)"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"scalar."},{"t":"Space"},{"t":"Str","c":"Otherwise,"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"SoftBreak"},{"t":"Strong","c":[{"t":"Str","c":"n-1"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"where"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"n"}]},{"t":"Space"},{"t":"Str","c":"equals"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"shape"},{"t":"Space"},{"t":"Str","c":"similar"},{"t":"SoftBreak"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"dimension"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"dropped"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"returned."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Options"}]}]]},{"t":"BulletList","c":[[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"Shall"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"real"}]},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"complex"}]},{"t":"Str","c":"."}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"shall"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"scalar"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"value"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"SoftBreak"},{"t":"Str","c":"range"},{"t":"Space"},{"t":"Str","c":"from"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"1"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"n"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"where"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"n"}]},{"t":"Space"},{"t":"Str","c":"equals"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Str","c":"."}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"shall"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"logical"}]},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"either"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"scalar"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"SoftBreak"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"same"},{"t":"Space"},{"t":"Str","c":"shape"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Str","c":"."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Result"}]}]]},{"t":"Para","c":[{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"same"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Str","c":"."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Examples"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program:"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program demo_product\nimplicit none\ncharacter(len=*),parameter :: all='(*(g0,1x))' ! a handy format\ncharacter(len=1),parameter :: nl=new_line('a')\n\nNO_DIM: block\n!    If DIM is not specified, the result is the product of all the\n!    selected array elements.\ninteger :: i,n, p1, p2\ninteger,allocatable :: array(:)\n   ! all elements are selected by default\n   do n=1,10\n      print all, 'factorial of ',n,' is ', product([(real(i),i=1,n)])\n   enddo\n\n   ! using a mask\n   array=[10,12,13,15,20,25,30]\n   p1=product(array, mask=mod(array, 2)==1) ! only odd elements\n   p2=product(array, mask=mod(array, 2)/=1) ! only even elements\n   print all, nl,'product of all elements',product(array) ! all elements\n   print all, ' odd * even =',nl,p1,'*',p2,'=',p1*p2\n\n   ! NOTE: If ARRAY is a zero-sized array, the result is equal to one\n   print all\n   print all, 'zero-sized array=>',product([integer :: ])\n   ! NOTE: If nothing in the mask is true, this also results in a null\n   !       array\n   print all, 'all elements have a false mask=>', &\n            & product(array,mask=.false.)\n\nendblock NO_DIM\n\nWITH_DIM: block\ninteger :: rect(2,3)\ninteger :: box(2,3,4)\n\n!  lets fill a few arrays\n   rect = reshape([ &\n     1, 2, 3,       &\n     4, 5, 6        &\n   ],shape(rect),order=[2,1])\n   call print_matrix_int('rect',rect)\n\n!  Find the product of each column in RECT.\n   print all, 'product of columns=',product(rect, dim = 1)\n\n! Find the product of each row in RECT.\n   print all, 'product of rows=',product(rect, dim = 2)\n\n! now lets try a box\n   box(:,:,1)=rect\n   box(:,:,2)=rect*(+10)\n   box(:,:,3)=rect*(-10)\n   box(:,:,4)=rect*2\n   ! lets look at the values\n   call print_matrix_int('box 1',box(:,:,1))\n   call print_matrix_int('box 2',box(:,:,2))\n   call print_matrix_int('box 3',box(:,:,3))\n   call print_matrix_int('box 4',box(:,:,4))\n\n   ! remember without dim= even a box produces a scalar\n   print all, 'no dim gives a scalar',product(real(box))\n\n   ! only one plane has negative values, so note all the \"1\" values\n   ! for vectors with no elements\n   call print_matrix_int('negative values', &\n   & product(box,mask=box < 0,dim=1))\n\n!   If DIM is specified and ARRAY has rank greater than one, the\n!   result is a new array in which dimension DIM has been eliminated.\n\n   ! pick a dimension to multiply though\n   call print_matrix_int('dim=1',product(box,dim=1))\n\n   call print_matrix_int('dim=2',product(box,dim=2))\n\n   call print_matrix_int('dim=3',product(box,dim=3))\n\nendblock WITH_DIM\n\ncontains\n\nsubroutine print_matrix_int(title,arr)\nimplicit none\n\n!@(#) print small 2d integer arrays in row-column format\n\ncharacter(len=*),intent(in)  :: title\ninteger,intent(in)           :: arr(:,:)\ninteger                      :: i\ncharacter(len=:),allocatable :: biggest\n\n   print all\n   print all, trim(title),':(',shape(arr),')'  ! print title\n   biggest='           '  ! make buffer to write integer into\n   ! find how many characters to use for integers\n   write(biggest,'(i0)')ceiling(log10(max(1.0,real(maxval(abs(arr))))))+2\n   ! use this format to write a row\n   biggest='(\" > [\",*(i'//trim(biggest)//':,\",\"))'\n   ! print one row of array at a time\n   do i=1,size(arr,dim=1)\n      write(*,fmt=biggest,advance='no')arr(i,:)\n      write(*,'(\" ]\")')\n   enddo\n\nend subroutine print_matrix_int\n\nend program demo_product\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]],"factorial of  1  is  1.000000\nfactorial of  2  is  2.000000\nfactorial of  3  is  6.000000\nfactorial of  4  is  24.00000\nfactorial of  5  is  120.0000\nfactorial of  6  is  720.0000\nfactorial of  7  is  5040.000\nfactorial of  8  is  40320.00\nfactorial of  9  is  362880.0\nfactorial of  10  is  3628800.\n\n product of all elements 351000000\n odd * even =\n 4875 * 72000 = 351000000\n\nzero-sized array=> 1\nall elements have a false mask=> 1\n\nrect :( 2 3 )\n > [  1,  2,  3 ]\n > [  4,  5,  6 ]\nproduct of columns= 4 10 18\nproduct of rows= 6 120\n\nbox 1 :( 2 3 )\n > [  1,  2,  3 ]\n > [  4,  5,  6 ]\n\nbox 2 :( 2 3 )\n > [  10,  20,  30 ]\n > [  40,  50,  60 ]\n\nbox 3 :( 2 3 )\n > [ -10, -20, -30 ]\n > [ -40, -50, -60 ]\n\nbox 4 :( 2 3 )\n > [   2,   4,   6 ]\n > [   8,  10,  12 ]\nno dim gives a scalar .1719927E+26\n\nnegative values :( 3 4 )\n > [     1,     1,   400,     1 ]\n > [     1,     1,  1000,     1 ]\n > [     1,     1,  1800,     1 ]\n\ndim=1 :( 3 4 )\n > [     4,   400,   400,    16 ]\n > [    10,  1000,  1000,    40 ]\n > [    18,  1800,  1800,    72 ]\n\ndim=2 :( 2 4 )\n > [       6,    6000,   -6000,      48 ]\n > [     120,  120000, -120000,     960 ]\n\ndim=3 :( 2 3 )\n > [    -200,   -3200,  -16200 ]\n > [  -51200, -125000, -259200 ]\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Standard"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"95"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"See"},{"t":"Space"},{"t":"Str","c":"Also"}]}]]},{"t":"Para","c":[{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"sum"}]},{"t":"Str","c":"(3)"}],["#sum",""]]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"note"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"element"},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"element"},{"t":"Space"},{"t":"Str","c":"multiplication"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"done"},{"t":"SoftBreak"},{"t":"Str","c":"directly"},{"t":"Space"},{"t":"Str","c":"using"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"star"},{"t":"Space"},{"t":"Str","c":"character."}]},{"t":"Para","c":[{"t":"Emph","c":[{"t":"Str","c":"fortran-lang"},{"t":"Space"},{"t":"Str","c":"intrinsic"},{"t":"Space"},{"t":"Str","c":"descriptions"},{"t":"Space"},{"t":"Str","c":"(license:"},{"t":"Space"},{"t":"Str","c":"MIT)"},{"t":"Space"},{"t":"Str","c":"@urbanjost"}]}]}],"pandoc-api-version":[1,17,5,4],"meta":{}}

{"blocks":[{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Name"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"count"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"[ARRAY:REDUCTION]"},{"t":"Space"},{"t":"Str","c":"Count"},{"t":"Space"},{"t":"Str","c":"true"},{"t":"Space"},{"t":"Str","c":"values"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Synopsis"}]}]]},{"t":"CodeBlock","c":[["",["fortran"],[]],"    result = count(mask [,dim] [,kind] )\n"]},{"t":"CodeBlock","c":[["",["fortran"],[]],"     integer(kind=KIND) function count(mask, dim, KIND )\n\n      logical(kind=**),intent(in) :: mask(..)\n      integer(kind=**),intent(in),optional :: dim\n      integer(kind=**),intent(in),optional :: KIND\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Characteristics"}]}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"designated"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Str","c":"**"},{"t":"Space"},{"t":"Str","c":"may"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"supported"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"type"}]}],[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"logical"}]},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"shape"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"kind."}]}],[{"t":"Plain","c":[{"t":"Str","c":"If"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"present,"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"specified"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"SoftBreak"},{"t":"Str","c":"removed."}]}],[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"KIND"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"scalar"},{"t":"Space"},{"t":"Str","c":"integer"},{"t":"Space"},{"t":"Str","c":"constant"},{"t":"Space"},{"t":"Str","c":"expression"},{"t":"Space"},{"t":"Str","c":"valid"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"kind"}]}],[{"t":"Plain","c":[{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"return"},{"t":"Space"},{"t":"Str","c":"value"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"default"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Str","c":"unless"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"kind"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"specified"},{"t":"SoftBreak"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"declare"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Description"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"count"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"counts"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"number"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":".true."}]},{"t":"Space"},{"t":"Str","c":"elements"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"logical"},{"t":"SoftBreak"},{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"or,"},{"t":"Space"},{"t":"Str","c":"if"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"argument"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"supplied,"},{"t":"Space"},{"t":"Str","c":"counts"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"number"},{"t":"SoftBreak"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"elements"},{"t":"Space"},{"t":"Str","c":"along"},{"t":"Space"},{"t":"Str","c":"each"},{"t":"Space"},{"t":"Str","c":"row"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"direction."},{"t":"Space"},{"t":"Str","c":"If"},{"t":"SoftBreak"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"has"},{"t":"Space"},{"t":"Str","c":"zero"},{"t":"Space"},{"t":"Str","c":"size"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"all"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"elements"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"Space"},{"t":"Str","c":"are"},{"t":"Space"},{"t":"Str","c":"false,"},{"t":"SoftBreak"},{"t":"Str","c":"then"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"0"}]},{"t":"Str","c":"."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Options"}]}]]},{"t":"BulletList","c":[[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"count"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"number"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":".true."}]},{"t":"Space"},{"t":"Str","c":"values"},{"t":"Space"},{"t":"Str","c":"in"}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"specifies"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"remove"},{"t":"Space"},{"t":"Str","c":"this"},{"t":"Space"},{"t":"Str","c":"dimension"},{"t":"Space"},{"t":"Str","c":"from"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"produce"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"SoftBreak"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"counts"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":".true."}]},{"t":"Space"},{"t":"Str","c":"values"},{"t":"Space"},{"t":"Str","c":"along"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"removed"},{"t":"Space"},{"t":"Str","c":"dimension."},{"t":"SoftBreak"},{"t":"Str","c":"If"},{"t":"Space"},{"t":"Str","c":"not"},{"t":"Space"},{"t":"Str","c":"present,"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"scalar"},{"t":"Space"},{"t":"Str","c":"count"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"true"},{"t":"Space"},{"t":"Str","c":"elements"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"SoftBreak"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"value"},{"t":"Space"},{"t":"Str","c":"must"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"range"},{"t":"Space"},{"t":"Str","c":"1"},{"t":"Space"},{"t":"Str","c":"<="},{"t":"Space"},{"t":"Str","c":"dim"},{"t":"Space"},{"t":"Str","c":"<="},{"t":"Space"},{"t":"Str","c":"n,"},{"t":"Space"},{"t":"Str","c":"where"},{"t":"Space"},{"t":"Str","c":"n"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"SoftBreak"},{"t":"Str","c":"rank(number"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"dimensions)"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"Str","c":"."}]},{"t":"Para","c":[{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"corresponding"},{"t":"Space"},{"t":"Str","c":"actual"},{"t":"Space"},{"t":"Str","c":"argument"},{"t":"Space"},{"t":"Str","c":"shall"},{"t":"Space"},{"t":"Str","c":"not"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"optional"},{"t":"Space"},{"t":"Str","c":"dummy"},{"t":"SoftBreak"},{"t":"Str","c":"argument,"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"disassociated"},{"t":"Space"},{"t":"Str","c":"pointer,"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"unallocated"},{"t":"Space"},{"t":"Str","c":"allocatable."}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"kind"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"An"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"initialization"},{"t":"Space"},{"t":"Str","c":"expression"},{"t":"Space"},{"t":"Str","c":"indicating"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"SoftBreak"},{"t":"Str","c":"parameter"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Result"}]}]]},{"t":"Para","c":[{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"return"},{"t":"Space"},{"t":"Str","c":"value"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"number"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":".true"}]},{"t":"Str","c":"."},{"t":"Space"},{"t":"Str","c":"values"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"Space"},{"t":"Str","c":"if"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"SoftBreak"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"not"},{"t":"Space"},{"t":"Str","c":"present."}]},{"t":"Para","c":[{"t":"Str","c":"If"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"present,"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"Space"},{"t":"Str","c":"one"},{"t":"Space"},{"t":"Str","c":"less"},{"t":"SoftBreak"},{"t":"Str","c":"than"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"rank"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"input"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"mask"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"size"},{"t":"Space"},{"t":"Str","c":"corresponding"},{"t":"SoftBreak"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"shape"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"array"}]},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"dim"}]},{"t":"Space"},{"t":"Str","c":"dimension"},{"t":"Space"},{"t":"Str","c":"removed,"},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"SoftBreak"},{"t":"Str","c":"remaining"},{"t":"Space"},{"t":"Str","c":"elements"},{"t":"Space"},{"t":"Str","c":"containing"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"number"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":".true."}]},{"t":"Space"},{"t":"Str","c":"elements"},{"t":"Space"},{"t":"Str","c":"along"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"SoftBreak"},{"t":"Str","c":"removed"},{"t":"Space"},{"t":"Str","c":"dimension."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Examples"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program:"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program demo_count\nimplicit none\ncharacter(len=*),parameter :: ints='(*(i2,1x))'\n! two arrays and a mask all with the same shape\ninteger, dimension(2,3) :: a, b\nlogical, dimension(2,3) :: mymask\ninteger :: i\ninteger :: c(2,3,4)\n\nprint *,'the numeric arrays we will compare'\na = reshape( [ 1, 2, 3, 4, 5, 6 ], [ 2, 3 ])\nb = reshape( [ 0, 7, 3, 4, 5, 8 ], [ 2, 3 ])\nc = reshape( [( i,i=1,24)], [ 2, 3 ,4])\nprint '(3i3)', a(1,:)\nprint '(3i3)', a(2,:)\nprint *\nprint '(3i3)', b(1,:)\nprint '(3i3)', b(2,:)\n!\n! basic calls\nprint *, 'count a few basic things creating a mask from an expression'\nprint *, 'count a>b',count(a>b)\nprint *, 'count b<a',count(a<b)\nprint *, 'count b==a',count(a==b)\nprint *, 'check sum = ',count(a>b) + &\n                      & count(a<b) + &\n                      & count(a==b).eq.size(a)\n!\n! The common usage is just getting a count, but if you want\n! to specify the DIM argument and get back reduced arrays\n! of counts this is easier to visualize if we look at a mask.\nprint *, 'make a mask identifying unequal elements ...'\nmymask = a.ne.b\nprint *, 'the mask generated from a.ne.b'\nprint '(3l3)', mymask(1,:)\nprint '(3l3)', mymask(2,:)\n!\nprint *,'count total and along rows and columns ...'\n!\nprint '(a)', 'number of elements not equal'\nprint '(a)', '(ie. total true elements in the mask)'\nprint '(3i3)', count(mymask)\n!\nprint '(a)', 'count of elements not equal in each column'\nprint '(a)', '(ie. total true elements in each column)'\nprint '(3i3)', count(mymask, dim=1)\n!\nprint '(a)', 'count of elements not equal in each row'\nprint '(a)', '(ie. total true elements in each row)'\nprint '(3i3)', count(mymask, dim=2)\n!\n! working with rank=3 ...\nprint *, 'lets try this with c(2,3,4)'\nprint *,'  taking the result of the modulo   '\nprint *,'   z=1      z=2      z=3      z=4   '\nprint *,'  1 3 0 || 2 4 1 || 3 0 2 || 4 1 3 |'\nprint *,'  2 4 1 || 3 0 2 || 4 1 3 || 0 2 4 |'\nprint *,'                                    '\nprint *,'  would result in the mask ..       '\nprint *,'  F F T || F F F || F T F || F F F |'\nprint *,'  F F F || F T F || F F F || T F F |'\nprint *,'                                    '\nprint *,' the total number of .true.values is'\nprint ints, count(modulo(c,5).eq.0)\ncall printi('counting up along a row and removing rows',&\ncount(modulo(c,5).eq.0,dim=1))\ncall printi('counting up along a column and removing columns',&\ncount(modulo(c,5).eq.0,dim=2))\ncall printi('counting up along a depth and removing depths',&\ncount(modulo(c,5).eq.0,dim=3))\n!\ncontains\n!\n! CONVENIENCE ROUTINE FOR PRINTING SMALL INTEGER MATRICES\nsubroutine printi(title,arr)\nimplicit none\n!\n!@(#) print small 2d integer arrays in row-column format\n!\ncharacter(len=*),parameter :: all='(*(g0,1x))' ! a handy format\ncharacter(len=*),intent(in)  :: title\ninteger,intent(in)           :: arr(:,:)\ninteger                      :: i\ncharacter(len=:),allocatable :: biggest\n   !\n   print all\n   print all, trim(title),':(',shape(arr),')'  ! print title\n   biggest='           '  ! make buffer to write integer into\n   ! find how many characters to use for integers\n   write(biggest,'(i0)')ceiling(log10(max(1.0,real(maxval(abs(arr))))))+2\n   ! use this format to write a row\n   biggest='(\" > [\",*(i'//trim(biggest)//':,\",\"))'\n   ! print one row of array at a time\n   do i=1,size(arr,dim=1)\n      write(*,fmt=biggest,advance='no')arr(i,:)\n      write(*,'(\" ]\")')\n   enddo\n   !\nend subroutine printi\nend program demo_count\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]]," >   the numeric arrays we will compare\n >    1  3  5\n >    2  4  6\n >\n >    0  3  5\n >    7  4  8\n >   count a few basic things creating a mask from an expression\n >   count a>b           1\n >   count b<a           2\n >   count b==a           3\n >   check sum =  T\n >   make a mask identifying unequal elements ...\n >   the mask generated from a.ne.b\n >    T  F  F\n >    T  F  T\n >   count total and along rows and columns ...\n >  number of elements not equal\n >  (ie. total true elements in the mask)\n >    3\n >  count of elements not equal in each column\n >  (ie. total true elements in each column)\n >    2  0  1\n >  count of elements not equal in each row\n >  (ie. total true elements in each row)\n >    1  2\n >   lets try this with c(2,3,4)\n >     taking the result of the modulo\n >      z=1      z=2      z=3      z=4\n >     1 3 0 || 2 4 1 || 3 0 2 || 4 1 3 |\n >     2 4 1 || 3 0 2 || 4 1 3 || 0 2 4 |\n >\n >     would result in the mask ..\n >     F F T || F F F || F T F || F F F |\n >     F F F || F T F || F F F || T F F |\n >\n >    the total number of .true.values is\n >   4\n >\n >  counting up along a row and removing rows :( 3 4 )\n >   > [ 0, 0, 0, 1 ]\n >   > [ 0, 1, 1, 0 ]\n >   > [ 1, 0, 0, 0 ]\n >\n >  counting up along a column and removing columns :( 2 4 )\n >   > [ 1, 0, 1, 0 ]\n >   > [ 0, 1, 0, 1 ]\n >\n >  counting up along a depth and removing depths :( 2 3 )\n >   > [ 0, 1, 1 ]\n >   > [ 1, 1, 0 ]\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Standard"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"95"},{"t":"Space"},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"KIND"},{"t":"Space"},{"t":"Str","c":"argument"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"2003"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"See"},{"t":"Space"},{"t":"Str","c":"Also"}]}]]},{"t":"Para","c":[{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"any"}]},{"t":"Str","c":"(3)"}],["#any",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"all"}]},{"t":"Str","c":"(3)"}],["#all",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"sum"}]},{"t":"Str","c":"(3)"}],["#sum",""]]},{"t":"Str","c":","}]},{"t":"Para","c":[{"t":"Emph","c":[{"t":"Str","c":"fortran-lang"},{"t":"Space"},{"t":"Str","c":"intrinsic"},{"t":"Space"},{"t":"Str","c":"descriptions"},{"t":"Space"},{"t":"Str","c":"(license:"},{"t":"Space"},{"t":"Str","c":"MIT)"},{"t":"Space"},{"t":"Str","c":"@urbanjost"}]}]}],"pandoc-api-version":[1,17,5,4],"meta":{}}

{"blocks":[{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Name"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"verify"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"[CHARACTER:SEARCH]"},{"t":"Space"},{"t":"Str","c":"Position"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"character"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"string"},{"t":"SoftBreak"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"characters"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"does"},{"t":"Space"},{"t":"Str","c":"not"},{"t":"Space"},{"t":"Str","c":"appear"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"given"},{"t":"Space"},{"t":"Str","c":"set"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"characters."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Synopsis"}]}]]},{"t":"CodeBlock","c":[["",["fortran"],[]],"    result = verify(string, set [,back] [,kind] )\n"]},{"t":"CodeBlock","c":[["",["fortran"],[]],"     elemental integer(kind=KIND) function verify(string,set,back,KIND)\n\n      character(len=*,kind=**),intent(in) :: string\n      character(len=*,kind=**),intent(in) :: set\n      logical,intent(in),optional :: back\n      integer,intent(in),optional :: KIND\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Characteristics"}]}]]},{"t":"BulletList","c":[[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"string"}]},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"set"}]},{"t":"Space"},{"t":"Str","c":"must"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"character"}]},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"have"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"same"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"SoftBreak"},{"t":"Str","c":"individual"},{"t":"Space"},{"t":"Str","c":"call,"},{"t":"Space"},{"t":"Str","c":"but"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"can"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"any"},{"t":"Space"},{"t":"Str","c":"supported"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"character"}]},{"t":"Space"},{"t":"Str","c":"kind."}]}],[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"KIND"}]},{"t":"Space"},{"t":"Str","c":"must"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"constant"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"initialization"},{"t":"Space"},{"t":"Str","c":"expression"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"SoftBreak"},{"t":"Str","c":"valid"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"type."}]}],[{"t":"Plain","c":[{"t":"Strong","c":[{"t":"Str","c":"back"}]},{"t":"Space"},{"t":"Str","c":"shall"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"type"},{"t":"Space"},{"t":"Str","c":"logical."}]}],[{"t":"Plain","c":[{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"returned"},{"t":"Space"},{"t":"Str","c":"value"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"same"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"kind"}]},{"t":"Space"},{"t":"Str","c":"if"},{"t":"SoftBreak"},{"t":"Str","c":"present."},{"t":"Space"},{"t":"Str","c":"Otherwise"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"default"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"returned."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Description"}]}]]},{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"verify"}]},{"t":"Str","c":"(3)"},{"t":"Space"},{"t":"Str","c":"verifies"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"all"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"characters"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"string"}]},{"t":"Space"},{"t":"Str","c":"belong"},{"t":"SoftBreak"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"set"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"characters"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"set"}]},{"t":"Space"},{"t":"Str","c":"by"},{"t":"Space"},{"t":"Str","c":"identifying"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"position"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"SoftBreak"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"first"},{"t":"Space"},{"t":"Str","c":"character"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"string"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"not"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"set."}]},{"t":"Para","c":[{"t":"Str","c":"This"},{"t":"Space"},{"t":"Str","c":"makes"},{"t":"Space"},{"t":"Str","c":"it"},{"t":"Space"},{"t":"Str","c":"easy"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"verify"},{"t":"Space"},{"t":"Str","c":"strings"},{"t":"Space"},{"t":"Str","c":"are"},{"t":"Space"},{"t":"Str","c":"all"},{"t":"Space"},{"t":"Str","c":"uppercase"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"lowercase,"},{"t":"SoftBreak"},{"t":"Str","c":"follow"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"basic"},{"t":"Space"},{"t":"Str","c":"syntax,"},{"t":"Space"},{"t":"Str","c":"only"},{"t":"Space"},{"t":"Str","c":"contain"},{"t":"Space"},{"t":"Str","c":"printable"},{"t":"Space"},{"t":"Str","c":"characters,"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"many"},{"t":"SoftBreak"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"conditions"},{"t":"Space"},{"t":"Str","c":"tested"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"C"},{"t":"Space"},{"t":"Str","c":"routines"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"isalnum"}]},{"t":"Str","c":"(3c),"},{"t":"SoftBreak"},{"t":"Strong","c":[{"t":"Str","c":"isalpha"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"isascii"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"isblank"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"iscntrl"}]},{"t":"Str","c":"(3c),"},{"t":"SoftBreak"},{"t":"Strong","c":[{"t":"Str","c":"isdigit"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"isgraph"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"islower"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"isprint"}]},{"t":"Str","c":"(3c),"},{"t":"SoftBreak"},{"t":"Strong","c":[{"t":"Str","c":"ispunct"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"isspace"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"isupper"}]},{"t":"Str","c":"(3c),"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"isxdigit"}]},{"t":"Str","c":"(3c);"},{"t":"SoftBreak"},{"t":"Str","c":"but"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"string"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Str","c":"well"},{"t":"Space"},{"t":"Str","c":"as"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"array"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"strings."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Options"}]}]]},{"t":"BulletList","c":[[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"string"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"string"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"search"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"unmatched"},{"t":"Space"},{"t":"Str","c":"character."}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"set"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"set"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"characters"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"must"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"matched."}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"back"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"direction"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"look"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"unmatched"},{"t":"Space"},{"t":"Str","c":"character."},{"t":"Space"},{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"left-most"},{"t":"SoftBreak"},{"t":"Str","c":"unmatched"},{"t":"Space"},{"t":"Str","c":"character"},{"t":"Space"},{"t":"Str","c":"position"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"returned"},{"t":"Space"},{"t":"Str","c":"unless"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"back"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"present"},{"t":"SoftBreak"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":".false."}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"which"},{"t":"Space"},{"t":"Str","c":"causes"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"position"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"right-most"},{"t":"Space"},{"t":"Str","c":"unmatched"},{"t":"SoftBreak"},{"t":"Str","c":"character"},{"t":"Space"},{"t":"Str","c":"to"},{"t":"Space"},{"t":"Str","c":"be"},{"t":"Space"},{"t":"Str","c":"returned"},{"t":"Space"},{"t":"Str","c":"instead"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"left-most"},{"t":"Space"},{"t":"Str","c":"unmatched"},{"t":"Space"},{"t":"Str","c":"character."}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"kind"}]},{"t":"SoftBreak"},{"t":"Str","c":":"},{"t":"Space"},{"t":"Str","c":"An"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":"integer"}]},{"t":"Space"},{"t":"Str","c":"initialization"},{"t":"Space"},{"t":"Str","c":"expression"},{"t":"Space"},{"t":"Str","c":"indicating"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"kind"},{"t":"SoftBreak"},{"t":"Str","c":"parameter"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result."}]}]]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Result"}]}]]},{"t":"Para","c":[{"t":"Str","c":"If"},{"t":"Space"},{"t":"Str","c":"all"},{"t":"Space"},{"t":"Str","c":"characters"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"string"}]},{"t":"Space"},{"t":"Str","c":"are"},{"t":"Space"},{"t":"Str","c":"found"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"set"}]},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"result"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"zero."}]},{"t":"Para","c":[{"t":"Str","c":"If"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"string"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"zero"},{"t":"Space"},{"t":"Str","c":"length"},{"t":"Space"},{"t":"Str","c":"a"},{"t":"Space"},{"t":"Str","c":"zero"},{"t":"Space"},{"t":"Str","c":"(0)"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"always"},{"t":"Space"},{"t":"Str","c":"returned."}]},{"t":"Para","c":[{"t":"Str","c":"Otherwise,"},{"t":"Space"},{"t":"Str","c":"if"},{"t":"Space"},{"t":"Str","c":"an"},{"t":"Space"},{"t":"Str","c":"unmatched"},{"t":"Space"},{"t":"Str","c":"character"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"found"},{"t":"SoftBreak"},{"t":"Str","c":"The"},{"t":"Space"},{"t":"Str","c":"position"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"first"},{"t":"Space"},{"t":"Str","c":"or"},{"t":"Space"},{"t":"Str","c":"last"},{"t":"Space"},{"t":"Str","c":"(if"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"back"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Emph","c":[{"t":"Str","c":".false."}]},{"t":"Str","c":")"},{"t":"Space"},{"t":"Str","c":"unmatched"},{"t":"SoftBreak"},{"t":"Str","c":"character"},{"t":"Space"},{"t":"Str","c":"in"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"string"}]},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"returned,"},{"t":"Space"},{"t":"Str","c":"starting"},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Str","c":"position"},{"t":"Space"},{"t":"Str","c":"one"},{"t":"Space"},{"t":"Str","c":"on"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"SoftBreak"},{"t":"Str","c":"left"},{"t":"Space"},{"t":"Str","c":"end"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"the"},{"t":"Space"},{"t":"Str","c":"string."}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Examples"}]}]]},{"t":"Header","c":[4,["",[],[]],[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program"},{"t":"Space"},{"t":"Str","c":"I:"}]]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program demo_verify\nimplicit none\n! some useful character sets\ncharacter,parameter :: &\n & int*(*)   = '1234567890', &\n & low*(*)   = 'abcdefghijklmnopqrstuvwxyz', &\n & upp*(*)   = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', &\n & punc*(*)  = \"!\"\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\", &\n & blank*(*) = ' ', &\n & tab       = char(11), &\n & prnt*(*) = int//low//upp//blank//punc\n\ncharacter(len=:),allocatable :: string\ninteger :: i\n    print *, 'basics:'\n    print *, VERIFY ('ABBA', 'A')                ! has the value 2.\n    print *, VERIFY ('ABBA', 'A', BACK = .TRUE.) ! has the value 3.\n    print *, VERIFY ('ABBA', 'AB')               ! has the value 0.\n\n   print *,'find first non-uppercase letter'\n   ! will produce the location of \"d\", because there is no match in UPP\n   write(*,*) 'something unmatched',verify(\"ABCdEFG\", upp)\n\n   print *,'if everything is matched return zero'\n   ! will produce 0 as all letters have a match\n   write(*,*) 'everything matched',verify(\"ffoorrttrraann\", \"nartrof\")\n\n   print *,'easily categorize strings as uppercase, lowercase, ...'\n   ! easy C-like functionality but does entire strings not just characters\n   write(*,*)'isdigit 123?',verify(\"123\", int) == 0\n   write(*,*)'islower abc?',verify(\"abc\", low) == 0\n   write(*,*)'isalpha aBc?',verify(\"aBc\", low//upp) == 0\n   write(*,*)'isblank aBc dEf?',verify(\"aBc dEf\", blank//tab ) /= 0\n   ! check if all printable characters\n   string=\"aB;cde,fgHI!Jklmno PQRSTU vwxyz\"\n   write(*,*)'isprint?',verify(string,prnt) == 0\n   ! this now has a nonprintable tab character in it\n   string(10:10)=char(11)\n   write(*,*)'isprint?',verify(string,prnt) == 0\n\n   print *,'VERIFY(3) is very powerful using expressions as masks'\n   ! verify(3f) is often used in a logical expression\n   string=\" This is NOT all UPPERCASE \"\n   write(*,*)'all uppercase/spaces?',verify(string, blank//upp) == 0\n   string=\" This IS all uppercase \"\n   write(*,*) 'string=['//string//']'\n   write(*,*)'all uppercase/spaces?',verify(string, blank//upp) == 0\n\n  ! set and show complex string to be tested\n   string='  Check this out. Let me know  '\n   ! show the string being examined\n   write(*,*) 'string=['//string//']'\n   write(*,*) '        '//repeat(int,4) ! number line\n\n   ! the Fortran functions returns a position just not a logical like C\n   print *, 'returning a position not just a logical is useful'\n   ! which can be very useful for parsing strings\n   write(*,*)'first non-blank character',verify(string, blank)\n   write(*,*)'last non-blank character',verify(string, blank,back=.true.)\n   write(*,*)'first non-letter non-blank',verify(string,low//upp//blank)\n\n  !VERIFY(3) is elemental so you can check an array of strings in one call\n  print *, 'elemental'\n   ! are strings all letters (or blanks)?\n   write(*,*) 'array of strings',verify( &\n   ! strings must all be same length, so force to length 10\n   & [character(len=10) :: \"YES\",\"ok\",\"000\",\"good one\",\"Nope!\"], &\n   & low//upp//blank) == 0\n\n   ! rarer, but the set can be an array, not just the strings to test\n   ! you could do ISPRINT() this (harder) way :>\n   write(*,*)'isprint?',.not.all(verify(\"aBc\", [(char(i),i=32,126)])==1)\n   ! instead of this way\n   write(*,*)'isprint?',verify(\"aBc\",prnt) == 0\n\nend program demo_verify\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]]," >  basics:\n >            2\n >            3\n >            0\n >  find first non-uppercase letter\n >  something unmatched           4\n >  if everything is matched return zero\n >  everything matched           0\n >  easily categorize strings as uppercase, lowercase, ...\n >  isdigit 123? T\n >  islower abc? T\n >  isalpha aBc? T\n >  isblank aBc dEf? T\n >  isprint? T\n >  isprint? F\n >  VERIFY(3) is very powerful using expressions as masks\n >  all uppercase/spaces? F\n >  string=[ This IS all uppercase ]\n >  all uppercase/spaces? F\n >  string=[  Check this out. Let me know  ]\n >          1234567890123456789012345678901234567890\n >  returning a position not just a logical is useful\n >  first non-blank character           3\n >  last non-blank character          29\n >  first non-letter non-blank          17\n >  elemental\n >  array of strings T T F T F\n >  isprint? T\n >  isprint? T\n"]},{"t":"Header","c":[4,["",[],[]],[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program"},{"t":"Space"},{"t":"Str","c":"II:"}]]},{"t":"Para","c":[{"t":"Str","c":"Determine"},{"t":"Space"},{"t":"Str","c":"if"},{"t":"Space"},{"t":"Str","c":"strings"},{"t":"Space"},{"t":"Str","c":"are"},{"t":"Space"},{"t":"Str","c":"valid"},{"t":"Space"},{"t":"Str","c":"integer"},{"t":"Space"},{"t":"Str","c":"representations"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program fortran_ints\nimplicit none\ninteger :: i\ncharacter(len=*),parameter :: ints(*)=[character(len=10) :: &\n '+1 ', &\n '3044848 ', &\n '30.40 ', &\n 'September ', &\n '1 2 3', &\n '  -3000 ', &\n ' ']\n   ! show the strings to test\n   write(*,'(\"|\",*(g0,\"|\"))') ints\n   ! show if strings pass or fail the test done by isint(3f)\n   write(*,'(\"|\",*(1x,l1,8x,\"|\"))') isint(ints)\n\ncontains\n\nelemental function isint(line) result (lout)\n!\n! determine if string is a valid integer representation\n! ignoring trailing spaces and leading spaces\n!\ncharacter(len=*),parameter   :: digits='0123456789'\ncharacter(len=*),intent(in)  :: line\ncharacter(len=:),allocatable :: name\nlogical                      :: lout\n   lout=.false.\n   ! make sure at least two characters long to simplify tests\n   name=adjustl(line)//'  '\n   ! blank string\n   if( name == '' )return\n   ! allow one leading sign\n   if( verify(name(1:1),'+-') == 0 ) name=name(2:)\n   ! was just a sign\n   if( name == '' )return\n   lout=verify(trim(name), digits)  == 0\nend function isint\n\nend program fortran_ints\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]],"|+1       |3044848  |30.40    |September|1 2 3    |  -3000  |         |\n| T       | T       | F       | F       | F       | T       | F       |\n"]},{"t":"Header","c":[4,["",[],[]],[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program"},{"t":"Space"},{"t":"Str","c":"III:"}]]},{"t":"Para","c":[{"t":"Str","c":"Determine"},{"t":"Space"},{"t":"Str","c":"if"},{"t":"Space"},{"t":"Str","c":"strings"},{"t":"Space"},{"t":"Str","c":"represent"},{"t":"Space"},{"t":"Str","c":"valid"},{"t":"Space"},{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"symbol"},{"t":"Space"},{"t":"Str","c":"names"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program fortran_symbol_name\nimplicit none\ninteger :: i\ncharacter(len=*),parameter :: symbols(*)=[character(len=10) :: &\n 'A_ ', &\n '10 ', &\n 'September ', &\n 'A B', &\n '_A ', &\n ' ']\n\n   write(*,'(\"|\",*(g0,\"|\"))') symbols\n   write(*,'(\"|\",*(1x,l1,8x,\"|\"))') fortran_name(symbols)\n\ncontains\n\nelemental function fortran_name(line) result (lout)\n!\n! determine if a string is a valid Fortran name\n! ignoring trailing spaces (but not leading spaces)\n!\ncharacter(len=*),parameter   :: int='0123456789'\ncharacter(len=*),parameter   :: lower='abcdefghijklmnopqrstuvwxyz'\ncharacter(len=*),parameter   :: upper='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ncharacter(len=*),parameter   :: allowed=upper//lower//int//'_'\n\ncharacter(len=*),intent(in)  :: line\ncharacter(len=:),allocatable :: name\nlogical                      :: lout\n   name=trim(line)\n   if(len(name).ne.0)then\n      ! first character is alphameric\n      lout = verify(name(1:1), lower//upper) == 0  &\n       ! other characters are allowed in a symbol name\n       & .and. verify(name,allowed) == 0           &\n       ! allowable length\n       & .and. len(name) <= 63\n   else\n      lout = .false.\n   endif\nend function fortran_name\n\nend program fortran_symbol_name\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]],"    |A_        |10        |September |A B       |_A        |          |\n    | T        | F        | T        | F        | F        | F        |\n"]},{"t":"Header","c":[4,["",[],[]],[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program"},{"t":"Space"},{"t":"Str","c":"IV:"}]]},{"t":"Para","c":[{"t":"Str","c":"check"},{"t":"Space"},{"t":"Str","c":"if"},{"t":"Space"},{"t":"Str","c":"string"},{"t":"Space"},{"t":"Str","c":"is"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"form"},{"t":"Space"},{"t":"Str","c":"NN-HHHHH"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program checkform\n! check if string is of form NN-HHHHH\nimplicit none\ncharacter(len=*),parameter :: int='1234567890'\ncharacter(len=*),parameter :: hex='abcdefABCDEF0123456789'\nlogical                    :: lout\ncharacter(len=80)          :: chars\n\n   chars='32-af43d'\n   lout=.true.\n\n   ! are the first two characters integer characters?\n   lout = lout.and.(verify(chars(1:2), int) == 0)\n\n   ! is the third character a dash?\n   lout = lout.and.(verify(chars(3:3), '-') == 0)\n\n   ! is remaining string a valid representation of a hex value?\n   lout = lout.and.(verify(chars(4:8), hex) == 0)\n\n   if(lout)then\n      write(*,*)trim(chars),' passed'\n   else\n      write(*,*)trim(chars),' failed'\n   endif\nend program checkform\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]],"    32-af43d passed\n"]},{"t":"Header","c":[4,["",[],[]],[{"t":"Str","c":"Sample"},{"t":"Space"},{"t":"Str","c":"program"},{"t":"Space"},{"t":"Str","c":"V:"}]]},{"t":"Para","c":[{"t":"Str","c":"exploring"},{"t":"Space"},{"t":"Str","c":"uses"},{"t":"Space"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"elemental"},{"t":"Space"},{"t":"Str","c":"functionality"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"dusty"},{"t":"Space"},{"t":"Str","c":"corners"}]},{"t":"CodeBlock","c":[["",["fortran"],[]],"program more_verify\nimplicit none\ncharacter(len=*),parameter :: &\n  & int='0123456789', &\n  & low='abcdefghijklmnopqrstuvwxyz', &\n  & upp='ABCDEFGHIJKLMNOPQRSTUVWXYZ', &\n  & blank=' '\n! note character variables in an array have to be of the same length\ncharacter(len=6) :: strings(3)=[\"Go    \",\"right \",\"home! \"]\ncharacter(len=2) :: sets(3)=[\"do\",\"re\",\"me\"]\n\n  ! elemental -- you can use arrays for both strings and for sets\n\n   ! check each string from right to left for non-letter/non-blank\n   write(*,*)'last non-letter',verify(strings,upp//low//blank,back=.true.)\n\n   ! even BACK can be an array\n   ! find last non-uppercase character in \"Howdy \"\n   ! and first non-lowercase in \"there \"\n   write(*,*) verify(strings(1:2),[upp,low],back=[.true.,.false.])\n\n   ! using a null string for a set is not well defined. Avoid it\n   write(*,*) 'null',verify(\"for tran \", \"\", .true.) ! 8,length of string?\n   ! probably what you expected\n   write(*,*) 'blank',verify(\"for tran \", \" \", .true.) ! 7,found 'n'\n\n   ! first character in  \"Go    \" not in \"do\",\n   ! and first letter in \"right \" not in \"ri\"\n   ! and first letter in \"home! \" not in \"me\"\n   write(*,*) verify(strings,sets)\n\nend program more_verify\n"]},{"t":"Para","c":[{"t":"Str","c":"Results:"}]},{"t":"CodeBlock","c":[["",["text"],[]],"    > last non-letter 0 0 5\n    > 6 6\n    > null 9\n    > blank 8\n    > 1 2 1\n"]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"Standard"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"95"},{"t":"Space"},{"t":"Str","c":","},{"t":"Space"},{"t":"Str","c":"with"},{"t":"Space"},{"t":"Strong","c":[{"t":"Str","c":"kind"}]},{"t":"Space"},{"t":"Str","c":"argument"},{"t":"Space"},{"t":"Str","c":"-"},{"t":"Space"},{"t":"Str","c":"Fortran"},{"t":"Space"},{"t":"Str","c":"2003"}]},{"t":"Header","c":[3,["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"See"},{"t":"Space"},{"t":"Str","c":"Also"}]}]]},{"t":"Para","c":[{"t":"Str","c":"Functions"},{"t":"Space"},{"t":"Str","c":"that"},{"t":"Space"},{"t":"Str","c":"perform"},{"t":"Space"},{"t":"Str","c":"operations"},{"t":"Space"},{"t":"Str","c":"on"},{"t":"Space"},{"t":"Str","c":"character"},{"t":"Space"},{"t":"Str","c":"strings,"},{"t":"Space"},{"t":"Str","c":"return"},{"t":"Space"},{"t":"Str","c":"lengths"},{"t":"SoftBreak"},{"t":"Str","c":"of"},{"t":"Space"},{"t":"Str","c":"arguments,"},{"t":"Space"},{"t":"Str","c":"and"},{"t":"Space"},{"t":"Str","c":"search"},{"t":"Space"},{"t":"Str","c":"for"},{"t":"Space"},{"t":"Str","c":"certain"},{"t":"Space"},{"t":"Str","c":"arguments:"}]},{"t":"BulletList","c":[[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"Elemental:"}]},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"adjustl"}]},{"t":"Str","c":"(3)"}],["#adjustl",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"adjustr"}]},{"t":"Str","c":"(3)"}],["#adjustr",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"index"}]},{"t":"Str","c":"(3)"}],["#index",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"scan"}]},{"t":"Str","c":"(3)"}],["#scan",""]]},{"t":"Str","c":","}]}],[{"t":"Para","c":[{"t":"Strong","c":[{"t":"Str","c":"Nonelemental:"}]},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"len_trim"}]},{"t":"Str","c":"(3)"}],["#len_trim",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"len"}]},{"t":"Str","c":"(3)"}],["#len",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"repeat"}]},{"t":"Str","c":"(3)"}],["#repeat",""]]},{"t":"Str","c":","},{"t":"SoftBreak"},{"t":"Link","c":[["",[],[]],[{"t":"Strong","c":[{"t":"Str","c":"trim"}]},{"t":"Str","c":"(3)"}],["#trim",""]]}]}]]},{"t":"Para","c":[{"t":"Emph","c":[{"t":"Str","c":"fortran-lang"},{"t":"Space"},{"t":"Str","c":"intrinsic"},{"t":"Space"},{"t":"Str","c":"descriptions"},{"t":"Space"},{"t":"Str","c":"(license:"},{"t":"Space"},{"t":"Str","c":"MIT)"},{"t":"Space"},{"t":"Str","c":"@urbanjost"}]}]}],"pandoc-api-version":[1,17,5,4],"meta":{}}
